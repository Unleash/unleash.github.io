"use strict";(self.webpackChunkwebsitev_2=self.webpackChunkwebsitev_2||[]).push([[8954],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,y=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(y,i(i({ref:t},s),{},{components:n})):r.createElement(y,i({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8641:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return s},default:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],l={id:"proxy-react",title:"React proxy SDK"},c=void 0,p={unversionedId:"sdks/proxy-react",id:"sdks/proxy-react",isDocsHomePage:!1,title:"React proxy SDK",description:"This library is meant to be used with the unleash-proxy. The proxy application layer will sit between your unleash instance and your client applications, and provides performance and security benefits. DO NOT TRY to connect this library directly to the unleash instance, as the datasets follow different formats because the proxy only returns evaluated toggle information.",source:"@site/docs/sdks/proxy-react.md",sourceDirName:"sdks",slug:"/sdks/proxy-react",permalink:"/sdks/proxy-react",editUrl:"https://github.com/Unleash/unleash/edit/master/websitev2/docs/sdks/proxy-react.md",tags:[],version:"current",frontMatter:{id:"proxy-react",title:"React proxy SDK"},sidebar:"documentation",previous:{title:"JavaScript Proxy SDK",permalink:"/sdks/proxy-javascript"},next:{title:"iOS Proxy SDK",permalink:"/sdks/proxy-ios"}},s=[{value:"Updating context",id:"updating-context",children:[]}],u={toc:s};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This library is meant to be used with the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Unleash/unleash-proxy"},"unleash-proxy"),". The proxy application layer will sit between your unleash instance and your client applications, and provides performance and security benefits. DO NOT TRY to connect this library directly to the unleash instance, as the datasets follow different formats because the proxy only returns evaluated toggle information.")),(0,a.kt)("h1",{id:"installation"},"Installation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"npm install @unleash/proxy-client-react\n// or\nyarn add @unleash/proxy-client-react\n")),(0,a.kt)("p",null,"Import the provider like this in your entrypoint file (typically index.js/ts):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"import FlagProvider from '@unleash/proxy-client-react';\n\nconst config = {\n  url: 'https://HOSTNAME/api/proxy',\n  clientKey: 'PROXYKEY',\n  refreshInterval: 15,\n  appName: 'your-app-name',\n  environment: 'dev',\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <FlagProvider config={config}>\n      <App />\n    </FlagProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n")),(0,a.kt)("p",null,"To check if a feature is enabled:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"import { useFlag } from '@unleash/proxy-client-react';\n\nconst TestComponent = () => {\n  const enabled = useFlag('travel.landing');\n\n  if (enabled) {\n    return <SomeComponent />\n  }\n  return <AnotherComponent />\n};\n\nexport default TestComponent;\n")),(0,a.kt)("p",null,"To check variants:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"import { useVariant } from '@unleash/proxy-client-react';\n\nconst TestComponent = () => {\n  const variant = useVariant('travel.landing');\n\n  if (variant.enabled && variant.name === \"SomeComponent\") {\n    return <SomeComponent />\n  } else if (variant.enabled && variant.name === \"AnotherComponent\") {\n    return <AnotherComponent />\n  }\n  return <DefaultComponent />\n};\n\nexport default TestComponent;\n")),(0,a.kt)("h2",{id:"updating-context"},"Updating context"),(0,a.kt)("p",null,"Follow the following steps in order to update the unleash context:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"import { useUnleashContext, useFlag } from '@unleash/proxy-client-react'\n\nconst MyComponent = ({ userId }) => {\n  const variant = useFlag(\"my-toggle\");\n  const updateContext = useUnleashContext();\n\n  useEffect(() => {\n    // context is updated with userId\n    updateContext({ userId })\n  }, [])\n}\n\n")))}d.isMDXComponent=!0}}]);