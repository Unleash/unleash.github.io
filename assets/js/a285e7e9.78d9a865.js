"use strict";(self.webpackChunkwebsitev_2=self.webpackChunkwebsitev_2||[]).push([[918],{3905:function(e,t,a){a.d(t,{Zo:function(){return s},kt:function(){return c}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),u=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},s=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=u(a),c=n,k=m["".concat(p,".").concat(c)]||m[c]||d[c]||o;return a?r.createElement(k,l(l({ref:t},s),{},{components:a})):r.createElement(k,l({ref:t},s))}));function c(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,l=new Array(o);l[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var u=2;u<o;u++)l[u]=a[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},7621:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return u},toc:function(){return s},default:function(){return m}});var r=a(3117),n=a(102),o=(a(7294),a(3905)),l=["components"],i={id:"import_export",title:"Import & Export"},p=void 0,u={unversionedId:"deploy/import_export",id:"deploy/import_export",isDocsHomePage:!1,title:"Import & Export",description:"since v3.3.0",source:"@site/docs/deploy/import-export.md",sourceDirName:"deploy",slug:"/deploy/import_export",permalink:"/deploy/import_export",editUrl:"https://github.com/Unleash/unleash/edit/master/websitev2/docs/deploy/import-export.md",tags:[],version:"current",frontMatter:{id:"import_export",title:"Import & Export"},sidebar:"Deploy and manage",previous:{title:"Migration Guide",permalink:"/deploy/migration_guide"}},s=[{value:"Runtime import &amp; export",id:"runtime-import--export",children:[{value:"State Service",id:"state-service",children:[],level:3},{value:"API Export",id:"api-export",children:[],level:3},{value:"API Import",id:"api-import",children:[],level:3}],level:2},{value:"Startup import",id:"startup-import",children:[{value:"Import files via config parameter",id:"import-files-via-config-parameter",children:[],level:3}],level:2}],d={toc:s};function m(e){var t=e.components,a=(0,n.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"since v3.3.0")),(0,o.kt)("p",null,"Unleash supports import and export of feature-toggles and strategies at startup and during runtime. The import mechanism will guarantee that all imported features will be non-archived, as well as updates to strategies and features are included in the event history."),(0,o.kt)("p",null,"All import mechanisms support a ",(0,o.kt)("inlineCode",{parentName:"p"},"drop")," parameter which will clean the database before import (all strategies and features will be removed)."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"You should be careful when using ",(0,o.kt)("inlineCode",{parentName:"p"},"drop")," parameter in production environments, as it will clean current state.")),(0,o.kt)("h2",{id:"runtime-import--export"},"Runtime import & export"),(0,o.kt)("h3",{id:"state-service"},"State Service"),(0,o.kt)("p",null,"Unleash returns a StateService when started, you can use this to import and export data at any time."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const unleash = require('unleash-server');\n\nconst { services } = await unleash.start({...});\nconst { stateService } = services;\n\nconst exportedData = await stateService.export({includeStrategies: false, includeFeatureToggles: true, includeTags: true, includeProjects: true});\n\nawait stateService.import({data: exportedData, userName: 'import', dropBeforeImport: false});\n\nawait stateService.importFile({file: 'exported-data.yml', userName: 'import', dropBeforeImport: true})\n")),(0,o.kt)("p",null,"If you want the database to be cleaned before import (all strategies and features will be removed), set the ",(0,o.kt)("inlineCode",{parentName:"p"},"dropBeforeImport")," parameter."),(0,o.kt)("p",null,"It is also possible to not override existing feature toggles (and strategies) by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"keepExisting")," parameter."),(0,o.kt)("h3",{id:"api-export"},"API Export"),(0,o.kt)("p",null,"The api endpoint ",(0,o.kt)("inlineCode",{parentName:"p"},"/api/admin/state/export")," will export feature-toggles and strategies as json by default.\\\nYou can customize the export with query parameters:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,o.kt)("th",{parentName:"tr",align:null},"Default"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"format"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"json")),(0,o.kt)("td",{parentName:"tr",align:null},"Export format, either ",(0,o.kt)("inlineCode",{parentName:"td"},"json")," or ",(0,o.kt)("inlineCode",{parentName:"td"},"yaml"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"download"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"false")),(0,o.kt)("td",{parentName:"tr",align:null},"If the exported data should be downloaded as a file")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"featureToggles"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"true")),(0,o.kt)("td",{parentName:"tr",align:null},"Include feature-toggles in the exported data")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"strategies"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"true")),(0,o.kt)("td",{parentName:"tr",align:null},"Include strategies in the exported data")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"tags"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"true")),(0,o.kt)("td",{parentName:"tr",align:null},"Include tagtypes, tags and feature_tags in the exported data")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"projects"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"true")),(0,o.kt)("td",{parentName:"tr",align:null},"Include projects in the exported data")))),(0,o.kt)("p",null,"For example if you want to download just feature-toggles as yaml:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"/api/admin/state/export?format=yaml&featureToggles=1&strategies=0&tags=0&projects=0&download=1\n")),(0,o.kt)("p",null,"Example with curl:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'curl -X GET -H "Content-Type: application/json" \\\n  -H "Authorization: Basic YWRtaW46" \\\n  http://unleash.herokuapp.com/api/admin/state/export?&featureToggles=1&strategies=0 > export.json\n')),(0,o.kt)("h3",{id:"api-import"},"API Import"),(0,o.kt)("p",null,"You can import feature-toggles and strategies by POSTing to the ",(0,o.kt)("inlineCode",{parentName:"p"},"/api/admin/state/import")," endpoint (keep in mind this will require authentication).\\\nYou can either send the data as JSON in the POST-body or send a ",(0,o.kt)("inlineCode",{parentName:"p"},"file")," parameter with ",(0,o.kt)("inlineCode",{parentName:"p"},"multipart/form-data")," (YAML files are also accepted here)."),(0,o.kt)("p",null,"You can customize the import with query parameters:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,o.kt)("th",{parentName:"tr",align:null},"Default"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"drop"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"false")),(0,o.kt)("td",{parentName:"tr",align:null},"If the database should be cleaned before import (see comment below)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"keep"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"true")),(0,o.kt)("td",{parentName:"tr",align:null},"If true, the existing feature toggles and strategies will not be override")))),(0,o.kt)("p",null,"If you want the database to be cleaned before import (",(0,o.kt)("strong",{parentName:"p"},"all strategies and features will be removed"),"), specify a ",(0,o.kt)("inlineCode",{parentName:"p"},"drop")," query parameter."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"You should never use this in production environments.")),(0,o.kt)("p",null,"Example usage:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'POST /api/admin/state/import\n{\n    "features": [\n        {\n            "name": "a-feature-toggle",\n            "enabled": true,\n            "description": "#1 feature-toggle"\n        }\n    ]\n}\n')),(0,o.kt)("p",null,"Example with curl:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'curl -X POST -H "Content-Type: application/json" \\\n  -H "Authorization: Basic YWRtaW46" -d @export.json \\\n  http://localhost:4242/api/admin/state/import\n')),(0,o.kt)("p",null,"*",") Remember to set correct token for Authorization."),(0,o.kt)("h2",{id:"startup-import"},"Startup import"),(0,o.kt)("h3",{id:"import-files-via-config-parameter"},"Import files via config parameter"),(0,o.kt)("p",null,"You can import a json or yaml file via the configuration option ",(0,o.kt)("inlineCode",{parentName:"p"},"importFile"),"."),(0,o.kt)("p",null,"Example usage: ",(0,o.kt)("inlineCode",{parentName:"p"},"unleash-server --databaseUrl ... --importFile export.yml"),"."),(0,o.kt)("p",null,"If you want the database to be cleaned before import (all strategies and features will be removed), specify the ",(0,o.kt)("inlineCode",{parentName:"p"},"dropBeforeImport")," option."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"You should never use this in production environments.")),(0,o.kt)("p",null,"Example usage: ",(0,o.kt)("inlineCode",{parentName:"p"},"unleash-server --databaseUrl ... --importFile export.yml --dropBeforeImport"),"."),(0,o.kt)("p",null,"These options can also be passed into the ",(0,o.kt)("inlineCode",{parentName:"p"},"unleash.start()")," entrypoint."))}m.isMDXComponent=!0}}]);