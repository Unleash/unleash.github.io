(self.webpackChunkwebsitev_2=self.webpackChunkwebsitev_2||[]).push([[1968],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return h}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),u=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(n),h=a,g=c["".concat(s,".").concat(h)]||c[h]||d[h]||r;return n?o.createElement(g,l(l({ref:t},p),{},{components:n})):o.createElement(g,l({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var u=2;u<r;u++)l[u]=n[u];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1478:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var o=n(2122),a=n(9756),r=(n(7294),n(3905)),l=["components"],i={id:"android_proxy_sdk",title:"Android Proxy SDK"},s={unversionedId:"sdks/android_proxy_sdk",id:"sdks/android_proxy_sdk",isDocsHomePage:!1,title:"Android Proxy SDK",description:"In this guide we'll explain how to use feature toggles in an Android application using Unleash's Android Proxy SDK and the Unleash Proxy.",source:"@site/docs/sdks/android-proxy.md",sourceDirName:"sdks",slug:"/sdks/android_proxy_sdk",permalink:"/sdks/android_proxy_sdk",editUrl:"https://github.com/Unleash/unleash/edit/master/websitev2/docs/sdks/android-proxy.md",version:"current",frontMatter:{id:"android_proxy_sdk",title:"Android Proxy SDK"},sidebar:"documentation",previous:{title:"Unleash Proxy",permalink:"/sdks/unleash-proxy"},next:{title:"JavaScript Proxy SDK",permalink:"/sdks/proxy-javascript"}},u=[],p={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In this guide we'll explain how to use feature toggles in an Android application using Unleash's ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unleash/unleash-android-proxy-sdk"},"Android Proxy SDK")," and the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unleash/unleash-proxy"},"Unleash Proxy"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"You will need your ",(0,r.kt)("inlineCode",{parentName:"p"},"PROXY_URL")," and your ",(0,r.kt)("inlineCode",{parentName:"p"},"PROXY_SECRET"),". Refer to the ",(0,r.kt)("a",{parentName:"p",href:"/sdks/unleash-proxy"},"Proxy documentation"))),(0,r.kt)("h1",{id:"step-1-install-the-proxy-sdk"},"Step 1: Install the proxy SDK"),(0,r.kt)("p",null,"First we must add unleash-android-proxy-sdk as a dependency to our project."),(0,r.kt)("p",null,"In gradle"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'implementation("io.getunleash:unleash-android-proxy-sdk:LATEST_VERSION")\n')),(0,r.kt)("p",null,"In maven"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n    <groupId>io.getunleash</groupId>\n    <artifactId>unleash-android-proxy-sdk</artifactId>\n    <version>Latest version here</version>\n</dependency>\n")),(0,r.kt)("h1",{id:"step-2-enable-internet"},"Step 2: Enable internet"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"NB - Your app will need internet permission in order to reach the proxy. So in your manifest add")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<uses-permission android:name="android.permission.INTERNET" />\n')),(0,r.kt)("h1",{id:"step-3-configure-context"},"Step 3: Configure Context"),(0,r.kt)("p",null,"Since the proxy works by evaluating all feature toggles server side and returning the evaluated toggles back to the client, we'll need to configure the context to send to the proxy for evaluation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'import io.getunleash.UnleashContext\n\nval myAppContext = UnleashContext.newBuilder()\n    .appName("Your AppName")\n    .userId("However you resolve your userid")\n    .sessionId("However you resolve your session id")\n    .build()\n')),(0,r.kt)("h1",{id:"step-4-configure-the-client"},"Step 4: Configure the Client"),(0,r.kt)("p",null,"Configuring the client includes adding the URL for your proxy host, your proxy secret and deciding how you want to load the toggle status. As of v0.1 the SDK supports an automatic polling with an adjustable poll period or loading the state from disk. Most users will probably use the polling client, but it's nice to know that you can instantiate your client without actually needing Internet if you choose loading from File"),(0,r.kt)("h1",{id:"step-4a-configure-client-polling-proxy"},"Step 4a: Configure client polling proxy"),(0,r.kt)("p",null,"Configuring a client with a 60 seconds poll interval"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'import io.getunleash.UnleashConfig\nimport io.getunleash.polling.PollingModes\n\nval unleashConfig = UnleashConfig.newBuilder()\n    .proxyUrl("URL to your proxy installation")\n    .clientSecret("yourProxyApiKey")\n    .pollMode(PollingModes.autoPoll(Duration.ofSeconds(60)) {\n        // This lambda will be called every time polling the server updates the toggle state\n        featuresUpdated()\n    })\n    .build()\n')),(0,r.kt)("h1",{id:"step-4b-configure-client-loading-toggles-from-a-file"},"Step 4b: Configure client loading toggles from a file"),(0,r.kt)("p",null,"If you need to have a known state for your UnleashClient, you can perform a query against the proxy using your HTTP client of choice and save the output as a json file. Then you can tell Unleash to use this file to setup toggle states."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'import io.getunleash.UnleashConfig\nimport io.getunleash.polling.PollingModes\n\nval toggles = File("/tmp/proxyresponse.json")\nval pollingMode = PollingModes.fileMode(toggles)\n\nval unleashConfig = UnleashConfig.newBuilder()\n    .proxyUrl("Doesn\'t matter since we don\'t use it when sent a file")\n    .clientSecret("Doesn\'t matter since we don\'t use it when sent a file")\n    .pollMode(pollingMode)\n    .build()\n')),(0,r.kt)("h1",{id:"step-5-instantiate-the-client"},"Step 5: Instantiate the client"),(0,r.kt)("p",null,"Having created your ",(0,r.kt)("inlineCode",{parentName:"p"},"UnleashContext")," and your ",(0,r.kt)("inlineCode",{parentName:"p"},"UnleashConfig")," you can now instantiate your client. Make sure you only do this once, and pass the instantiated the client to classes/functions that need it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"import io.getunleash.UnleashClient\n\nval unleashClient = UnleashClient(config = unleashConfig, context = myAppContext)\n")),(0,r.kt)("h1",{id:"step-6-use-the-feature-toggle"},"Step 6: Use the feature toggle"),(0,r.kt)("p",null,"Now that we have initialized the proxy SDK we can start using feature toggles defined in Unleash in our application. To achieve this we have the \u201cisEnabled\u201d method available, which will allow us to check the value of a feature toggle. This method will return true or false based on whether the feature should be enabled or disabled for the current state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'if (unleashClient.isEnabled("AwesomeFeature")) {\n    //do some magic\n} else {\n    //do old boring stuff\n}\n')),(0,r.kt)("h1",{id:"updates"},"Updates"),(0,r.kt)("p",null,"When using the AutoPoll mode you are able to pass in a listener which will get notified everytime our toggles changes, allowing you to recheck your toggles. For an example, see our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unleash/unleash-android-proxy-sdk/blob/main/samples/android/app/src/main/java/com/example/unleash/MainActivity.kt"},"android-sample-app")),(0,r.kt)("h1",{id:"kdoc"},"KDoc"),(0,r.kt)("p",null,"KDoc for the api is available at ",(0,r.kt)("a",{parentName:"p",href:"https://docs.getunleash.io/unleash-android-proxy-sdk"},"https://docs.getunleash.io/unleash-android-proxy-sdk")),(0,r.kt)("h1",{id:"github"},"Github"),(0,r.kt)("p",null,"Readme for the client and source code is available at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unleash/unleash-android-proxy-sdk"},"https://github.com/Unleash/unleash-android-proxy-sdk")))}d.isMDXComponent=!0}}]);