"use strict";(self.webpackChunkwebsitev_2=self.webpackChunkwebsitev_2||[]).push([[8214],{74124:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(87462),l=n(67294),r=n(86010),o=n(5730),s=n(20636),i=n(76602),u=n(63735);const p="tabList__CuJ",c="tabItem_LNqP";function d(e){var t;const{lazy:n,block:o,defaultValue:d,values:m,groupId:h,className:v}=e,g=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=m??g.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),k=(0,s.l)(f,((e,t)=>e.value===t.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===d?d:d??(null==(t=g.find((e=>e.props.default)))?void 0:t.props.value)??g[0].props.value;if(null!==y&&!f.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:b,setTabGroupChoices:x}=(0,i.U)(),[N,w]=(0,l.useState)(y),C=[],{blockElementScrollPositionUntilNextRender:P}=(0,u.o5)();if(null!=h){const e=b[h];null!=e&&e!==N&&f.some((t=>t.value===e))&&w(e)}const I=e=>{const t=e.currentTarget,n=C.indexOf(t),a=f[n].value;a!==N&&(P(t),w(a),null!=h&&x(h,String(a)))},T=e=>{var t;let n=null;switch(e.key){case"Enter":I(e);break;case"ArrowRight":{const t=C.indexOf(e.currentTarget)+1;n=C[t]??C[0];break}case"ArrowLeft":{const t=C.indexOf(e.currentTarget)-1;n=C[t]??C[C.length-1];break}}null==(t=n)||t.focus()};return l.createElement("div",{className:(0,r.Z)("tabs-container",p)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":o},v)},f.map((e=>{let{value:t,label:n,attributes:o}=e;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>C.push(e),onKeyDown:T,onClick:I},o,{className:(0,r.Z)("tabs__item",c,null==o?void 0:o.className,{"tabs__item--active":N===t})}),n??t)}))),n?(0,l.cloneElement)(g.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function m(e){const t=(0,o.Z)();return l.createElement(d,(0,a.Z)({key:String(t)},e))}},1403:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>u,toc:()=>c});var a=n(87462),l=(n(67294),n(3905)),r=n(74124),o=n(11666);const s={id:"proxy-vue",title:"Vue Proxy SDK"},i=void 0,u={unversionedId:"sdks/proxy-vue",id:"sdks/proxy-vue",title:"Vue Proxy SDK",description:"Vue Proxy SDK is currently at version 0.0.1 and is experimental.",source:"@site/docs/sdks/proxy-vue.md",sourceDirName:"sdks",slug:"/sdks/proxy-vue",permalink:"/sdks/proxy-vue",draft:!1,editUrl:"https://github.com/Unleash/unleash/edit/main/website/docs/sdks/proxy-vue.md",tags:[],version:"current",frontMatter:{id:"proxy-vue",title:"Vue Proxy SDK"},sidebar:"documentation",previous:{title:"Svelte Proxy SDK",permalink:"/sdks/proxy-svelte"},next:{title:"Deploy and manage Unleash",permalink:"/deploy"}},p={},c=[{value:"Installation",id:"installation",level:2},{value:"Initialization",id:"initialization",level:2},{value:"Deferring client start",id:"deferring-client-start",level:2},{value:"Usage",id:"usage",level:2},{value:"Check feature toggle status",id:"check-feature-toggle-status",level:3},{value:"Check variants",id:"check-variants",level:3},{value:"Defer rendering until flags fetched",id:"defer-rendering-until-flags-fetched",level:3},{value:"Updating context",id:"updating-context",level:3}],d={toc:c};function m(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("div",{class:"alert alert--info",role:"alert"},(0,l.kt)("em",null,"Vue Proxy SDK is currently at version 0.0.1 and is experimental"),"."),(0,l.kt)("br",null),(0,l.kt)("p",null,"This library can be used with the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/Unleash/unleash-proxy"},"Unleash Proxy")," or with the ",(0,l.kt)("a",{parentName:"p",href:"../reference/front-end-api"},"Unleash front-end API"),". It is ",(0,l.kt)("em",{parentName:"p"},"not")," compatible with the regular Unleash client API."),(0,l.kt)("p",null,"For more detailed information, check out the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/Unleash/proxy-client-vue"},"Vue Proxy SDK on GitHub"),"."),(0,l.kt)("h2",{id:"installation"},"Installation"),(0,l.kt)(r.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"npm",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"npm install @unleash/proxy-client-vue\n"))),(0,l.kt)(o.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"yarn add @unleash/proxy-client-vue\n")))),(0,l.kt)("h2",{id:"initialization"},"Initialization"),(0,l.kt)("p",null,"Import the provider like this in your entrypoint file (typically App.vue):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import { FlagProvider } from '@unleash/proxy-client-vue'\n\nconst config = {\n  url: 'https://HOSTNAME/proxy',\n  clientKey: 'PROXYKEY',\n  refreshInterval: 15,\n  appName: 'your-app-name',\n  environment: 'dev'\n}\n\n<template>\n  <FlagProvider :config=\"config\">\n    <App />\n  </FlagProvider>\n</template>\n")),(0,l.kt)("p",null,"Alternatively, you can pass your own client in to the FlagProvider:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import { FlagProvider, UnleashClient } from '@unleash/proxy-client-vue'\n\nconst config = {\n  url: 'https://HOSTNAME/proxy',\n  clientKey: 'PROXYKEY',\n  refreshInterval: 15,\n  appName: 'your-app-name',\n  environment: 'dev'\n}\n\nconst client = new UnleashClient(config)\n\n<template>\n  <FlagProvider :unleash-client=\"client\">\n    <App />\n  </FlagProvider>\n</template>\n")),(0,l.kt)("h2",{id:"deferring-client-start"},"Deferring client start"),(0,l.kt)("p",null,"By default, the Unleash client will start polling the Proxy for toggles immediately when the ",(0,l.kt)("inlineCode",{parentName:"p"},"FlagProvider")," component renders. You can delay the polling by:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"setting the ",(0,l.kt)("inlineCode",{parentName:"li"},"startClient")," prop to ",(0,l.kt)("inlineCode",{parentName:"li"},"false")),(0,l.kt)("li",{parentName:"ul"},"passing a client instance to the ",(0,l.kt)("inlineCode",{parentName:"li"},"FlagProvider"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'<template>\n  <FlagProvider :unleash-client="client" :start-client="false">\n    <App />\n  </FlagProvider>\n</template>\n')),(0,l.kt)("p",null,"Deferring the client start gives you more fine-grained control over when to start fetching the feature toggle configuration. This could be handy in cases where you need to get some other context data from the server before fetching toggles, for instance."),(0,l.kt)("p",null,"To start the client, use the client's ",(0,l.kt)("inlineCode",{parentName:"p"},"start")," method. The below snippet of pseudocode will defer polling until the end of the ",(0,l.kt)("inlineCode",{parentName:"p"},"asyncProcess")," function."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'const client = new UnleashClient({\n  /* ... */\n})\n\nonMounted(() => {\n  const asyncProcess = async () => {\n    // do async work ...\n    client.start()\n  }\n  asyncProcess()\n})\n\n<template>\n  <FlagProvider :unleash-client="client" :start-client="false">\n    <App />\n  </FlagProvider>\n</template>\n')),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("h3",{id:"check-feature-toggle-status"},"Check feature toggle status"),(0,l.kt)("p",null,"To check if a feature is enabled:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"<script setup>\nimport { useFlag } from '@unleash/proxy-client-vue'\n\nconst enabled = useFlag('travel.landing')\n<\/script>\n\n<template>\n  <SomeComponent v-if=\"enabled\" />\n  <AnotherComponent v-else />\n</template>\n")),(0,l.kt)("h3",{id:"check-variants"},"Check variants"),(0,l.kt)("p",null,"To check variants:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"<script setup>\nimport { useVariant } from '@unleash/proxy-client-vue'\n\nconst variant = useVariant('travel.landing')\n<\/script>\n\n<template>\n  <SomeComponent v-if=\"variant.enabled && variant.name === 'SomeComponent'\" />\n  <AnotherComponent v-else-if=\"variant.enabled && variant.name === 'AnotherComponent\" />\n  <DefaultComponent v-else />\n</template>\n")),(0,l.kt)("h3",{id:"defer-rendering-until-flags-fetched"},"Defer rendering until flags fetched"),(0,l.kt)("p",null,"useFlagsStatus retrieves the ready state and error events. Follow the following steps in order to delay rendering until the flags have been fetched."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useFlagsStatus } from '@unleash/proxy-client-vue'\n\nconst { flagsReady, flagsError } = useFlagsStatus()\n\n<Loading v-if=\"!flagsReady\" />\n<MyComponent v-else error={flagsError} />\n")),(0,l.kt)("h3",{id:"updating-context"},"Updating context"),(0,l.kt)("p",null,"Follow the following steps in order to update the unleash context:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useUnleashContext, useFlag } from '@unleash/proxy-client-vue'\n\nconst props = defineProps<{\n  userId: string\n}>()\n\nconst { userId } = toRefs(props)\n\nconst updateContext = useUnleashContext()\n\nonMounted(() => {\n  updateContext({ userId })\n})\n\nwatch(userId, () => {\n  async function run() {\n    await updateContext({ userId: userId.value })\n    console.log('new flags loaded for', userId.value)\n  }\n  run()\n})\n")))}m.isMDXComponent=!0}}]);