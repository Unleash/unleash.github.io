"use strict";(self.webpackChunkwebsitev_2=self.webpackChunkwebsitev_2||[]).push([[7938],{42585:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(87462),l=(n(67294),n(3905));const i={title:"Ruby",slug:"/reference/sdks/ruby",custom_edit_url:"https://github.com/Unleash/unleash-client-ruby/edit/main/README.md"},r=void 0,o={unversionedId:"generated/sdks/server-side/ruby",id:"generated/sdks/server-side/ruby",title:"Ruby",description:"This document was generated from the README in the Ruby GitHub repository.",source:"@site/docs/generated/sdks/server-side/ruby.md",sourceDirName:"generated/sdks/server-side",slug:"/reference/sdks/ruby",permalink:"/reference/sdks/ruby",draft:!1,editUrl:"https://github.com/Unleash/unleash-client-ruby/edit/main/README.md",tags:[],version:"current",frontMatter:{title:"Ruby",slug:"/reference/sdks/ruby",custom_edit_url:"https://github.com/Unleash/unleash-client-ruby/edit/main/README.md"},sidebar:"documentation",previous:{title:"Python",permalink:"/reference/sdks/python"},next:{title:"Rust",permalink:"/reference/sdks/rust"}},s={},p=[{value:"Supported Ruby Interpreters",id:"supported-ruby-interpreters",level:2},{value:"Installation",id:"installation",level:2},{value:"Configure",id:"configure",level:2},{value:"Dynamic custom HTTP headers",id:"dynamic-custom-http-headers",level:2},{value:"List of Arguments",id:"list-of-arguments",level:4},{value:"Usage in a plain Ruby Application",id:"usage-in-a-plain-ruby-application",level:2},{value:"Usage in a Rails Application",id:"usage-in-a-rails-application",level:2},{value:"Add Initializer",id:"add-initializer",level:4},{value:"Add Initializer if using Puma in clustered mode",id:"add-initializer-if-using-puma-in-clustered-mode",level:4},{value:"with <code>preload_app!</code>",id:"with-preload_app",level:5},{value:"without <code>preload_app!</code>",id:"without-preload_app",level:5},{value:"Add Initializer if using Phusion Passenger",id:"add-initializer-if-using-phusion-passenger",level:4},{value:"Add Initializer hooks when using within Sidekiq",id:"add-initializer-hooks-when-using-within-sidekiq",level:4},{value:"Set Unleash::Context",id:"set-unleashcontext",level:4},{value:"Sample usage",id:"sample-usage",level:4},{value:"Variations",id:"variations",level:5},{value:"Bootstrapping",id:"bootstrapping",level:2},{value:"Client methods",id:"client-methods",level:4},{value:"Local test client",id:"local-test-client",level:2},{value:"Available Strategies",id:"available-strategies",level:2},{value:"Custom Strategies",id:"custom-strategies",level:2},{value:"Development",id:"development",level:2},{value:"Releasing",id:"releasing",level:2},{value:"Contributing",id:"contributing",level:2}],u={toc:p};function d(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("admonition",{title:"Generated content",type:"info"},(0,l.kt)("p",{parentName:"admonition"},"This document was generated from the README in the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/Unleash/unleash-client-ruby"},"Ruby GitHub repository"),".")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"To connect to Unleash, you'll need your Unleash API url (e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"https://<your-unleash>/api"),") and a ",(0,l.kt)("a",{parentName:"p",href:"/reference/api-tokens-and-client-keys#client-tokens"},"server-side API token")," (",(0,l.kt)("a",{parentName:"p",href:"/how-to/how-to-create-api-tokens"},"how do I create an API token?"),").")),(0,l.kt)("h1",{id:"unleashclient"},"Unleash::Client"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://github.com/Unleash/unleash-client-ruby/actions/workflows/pull_request.yml/badge.svg?branch=main",alt:"Build Status"}),"\n",(0,l.kt)("a",{parentName:"p",href:"https://coveralls.io/github/Unleash/unleash-client-ruby?branch=main"},(0,l.kt)("img",{parentName:"a",src:"https://coveralls.io/repos/github/Unleash/unleash-client-ruby/badge.svg?branch=main",alt:"Coverage Status"})),"\n",(0,l.kt)("a",{parentName:"p",href:"https://badge.fury.io/rb/unleash"},(0,l.kt)("img",{parentName:"a",src:"https://badge.fury.io/rb/unleash.svg",alt:"Gem Version"}))),(0,l.kt)("p",null,"Unleash client so you can roll out your features with confidence."),(0,l.kt)("p",null,"Leverage the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/Unleash/unleash"},"Unleash Server")," for powerful feature toggling in your ruby/rails applications."),(0,l.kt)("h2",{id:"supported-ruby-interpreters"},"Supported Ruby Interpreters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"MRI 3.2"),(0,l.kt)("li",{parentName:"ul"},"MRI 3.1"),(0,l.kt)("li",{parentName:"ul"},"MRI 3.0"),(0,l.kt)("li",{parentName:"ul"},"MRI 2.7"),(0,l.kt)("li",{parentName:"ul"},"MRI 2.6"),(0,l.kt)("li",{parentName:"ul"},"MRI 2.5"),(0,l.kt)("li",{parentName:"ul"},"jruby 9.4"),(0,l.kt)("li",{parentName:"ul"},"jruby 9.3"),(0,l.kt)("li",{parentName:"ul"},"jruby 9.2")),(0,l.kt)("h2",{id:"installation"},"Installation"),(0,l.kt)("p",null,"Add this line to your application's Gemfile:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"gem 'unleash', '~> 4.5.0'\n")),(0,l.kt)("p",null,"And then execute:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$ bundle\n")),(0,l.kt)("p",null,"Or install it yourself as:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$ gem install unleash\n")),(0,l.kt)("h2",{id:"configure"},"Configure"),(0,l.kt)("p",null,"It is ",(0,l.kt)("strong",{parentName:"p"},"required")," to configure:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"url")," of the unleash server"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"app_name")," with the name of the runninng application."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"custom_http_headers")," with ",(0,l.kt)("inlineCode",{parentName:"li"},"{'Authorization': '<API token>'}")," when using Unleash v4.0.0 and later.")),(0,l.kt)("p",null,"Please substitute the example ",(0,l.kt)("inlineCode",{parentName:"p"},"'https://unleash.herokuapp.com/api'")," for the url of your own instance."),(0,l.kt)("p",null,"It is ",(0,l.kt)("strong",{parentName:"p"},"highly recommended")," to configure:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"instance_id")," parameter with a unique identifier for the running instance.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"Unleash.configure do |config|\n  config.app_name            = 'my_ruby_app'\n  config.url                 = 'https://unleash.herokuapp.com/api'\n  config.custom_http_headers = {'Authorization': '<API token>'}\nend\n")),(0,l.kt)("p",null,"or instantiate the client with the valid configuration:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"UNLEASH = Unleash::Client.new(url: 'https://unleash.herokuapp.com/api', app_name: 'my_ruby_app', custom_http_headers: {'Authorization': '<API token>'})\n")),(0,l.kt)("h2",{id:"dynamic-custom-http-headers"},"Dynamic custom HTTP headers"),(0,l.kt)("p",null,"If you need custom HTTP headers that change during the lifetime of the client, the ",(0,l.kt)("inlineCode",{parentName:"p"},"custom_http_headers")," can be given as a ",(0,l.kt)("inlineCode",{parentName:"p"},"Proc"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"Unleash.configure do |config|\n  config.app_name            = 'my_ruby_app'\n  config.url                 = 'https://unleash.herokuapp.com/api'\n  config.custom_http_headers =  proc do\n    {\n      'Authorization': '<API token>',\n      'X-Client-Request-Time': Time.now.iso8601\n    }\n  end\nend\n")),(0,l.kt)("h4",{id:"list-of-arguments"},"List of Arguments"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Argument"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Required?"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default Value"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"url")),(0,l.kt)("td",{parentName:"tr",align:null},"Unleash server URL."),(0,l.kt)("td",{parentName:"tr",align:null},"Y"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"app_name")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of your program."),(0,l.kt)("td",{parentName:"tr",align:null},"Y"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"instance_id")),(0,l.kt)("td",{parentName:"tr",align:null},"Identifier for the running instance of program. Important so you can trace back to where metrics are being collected from. ",(0,l.kt)("strong",{parentName:"td"},"Highly recommended be be set.")),(0,l.kt)("td",{parentName:"tr",align:null},"N"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"random UUID")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"environment")),(0,l.kt)("td",{parentName:"tr",align:null},"Unleash context option. Could be for example ",(0,l.kt)("inlineCode",{parentName:"td"},"prod")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"dev"),". Not yet in use. ",(0,l.kt)("strong",{parentName:"td"},"Not")," the same as the SDK's ",(0,l.kt)("a",{parentName:"td",href:"https://docs.getunleash.io/reference/environments"},"Unleash environment"),"."),(0,l.kt)("td",{parentName:"tr",align:null},"N"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"default"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"project_name")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the project to retrieve features from. If not set, all feature flags will be retrieved."),(0,l.kt)("td",{parentName:"tr",align:null},"N"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"nil")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"refresh_interval")),(0,l.kt)("td",{parentName:"tr",align:null},"How often the unleash client should check with the server for configuration changes."),(0,l.kt)("td",{parentName:"tr",align:null},"N"),(0,l.kt)("td",{parentName:"tr",align:null},"Integer"),(0,l.kt)("td",{parentName:"tr",align:null},"15")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"metrics_interval")),(0,l.kt)("td",{parentName:"tr",align:null},"How often the unleash client should send metrics to server."),(0,l.kt)("td",{parentName:"tr",align:null},"N"),(0,l.kt)("td",{parentName:"tr",align:null},"Integer"),(0,l.kt)("td",{parentName:"tr",align:null},"60")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"disable_client")),(0,l.kt)("td",{parentName:"tr",align:null},"Disables all communication with the Unleash server, effectively taking it ",(0,l.kt)("em",{parentName:"td"},"offline"),". If set, ",(0,l.kt)("inlineCode",{parentName:"td"},"is_enabled?")," will always answer with the ",(0,l.kt)("inlineCode",{parentName:"td"},"default_value")," and configuration validation is skipped. Will also forcefully set ",(0,l.kt)("inlineCode",{parentName:"td"},"disable_metrics")," to ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),". Defeats the entire purpose of using unleash, except when running tests."),(0,l.kt)("td",{parentName:"tr",align:null},"N"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"false"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"disable_metrics")),(0,l.kt)("td",{parentName:"tr",align:null},"Disables sending metrics to Unleash server. If the ",(0,l.kt)("inlineCode",{parentName:"td"},"disable_client")," option is set to ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", then this option will also be set to ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", regardless of the value provided."),(0,l.kt)("td",{parentName:"tr",align:null},"N"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"false"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"custom_http_headers")),(0,l.kt)("td",{parentName:"tr",align:null},"Custom headers to send to Unleash. As of Unleash v4.0.0, the ",(0,l.kt)("inlineCode",{parentName:"td"},"Authorization")," header is required. For example: ",(0,l.kt)("inlineCode",{parentName:"td"},"{'Authorization': '<API token>'}")),(0,l.kt)("td",{parentName:"tr",align:null},"N"),(0,l.kt)("td",{parentName:"tr",align:null},"Hash/Proc"),(0,l.kt)("td",{parentName:"tr",align:null},"{}")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"timeout")),(0,l.kt)("td",{parentName:"tr",align:null},"How long to wait for the connection to be established or wait in reading state (open_timeout/read_timeout)"),(0,l.kt)("td",{parentName:"tr",align:null},"N"),(0,l.kt)("td",{parentName:"tr",align:null},"Integer"),(0,l.kt)("td",{parentName:"tr",align:null},"30")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"retry_limit")),(0,l.kt)("td",{parentName:"tr",align:null},"How many consecutive failures in connecting to the Unleash server are allowed before giving up. The default is to retry indefinitely."),(0,l.kt)("td",{parentName:"tr",align:null},"N"),(0,l.kt)("td",{parentName:"tr",align:null},"Float::INFINITY"),(0,l.kt)("td",{parentName:"tr",align:null},"5")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"backup_file")),(0,l.kt)("td",{parentName:"tr",align:null},"Filename to store the last known state from the Unleash server. Best to not change this from the default."),(0,l.kt)("td",{parentName:"tr",align:null},"N"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'Dir.tmpdir + "/unleash-#{app_name}-repo.json'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"logger")),(0,l.kt)("td",{parentName:"tr",align:null},"Specify a custom ",(0,l.kt)("inlineCode",{parentName:"td"},"Logger")," class to handle logs for the Unleash client."),(0,l.kt)("td",{parentName:"tr",align:null},"N"),(0,l.kt)("td",{parentName:"tr",align:null},"Class"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Logger.new(STDOUT)"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"log_level")),(0,l.kt)("td",{parentName:"tr",align:null},"Change the log level for the ",(0,l.kt)("inlineCode",{parentName:"td"},"Logger")," class. Constant from ",(0,l.kt)("inlineCode",{parentName:"td"},"Logger::Severity"),"."),(0,l.kt)("td",{parentName:"tr",align:null},"N"),(0,l.kt)("td",{parentName:"tr",align:null},"Constant"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Logger::WARN"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bootstrap_config")),(0,l.kt)("td",{parentName:"tr",align:null},"Bootstrap config on how to loaded data on start-up. This is useful for loading large states on startup without (or before) hitting the network."),(0,l.kt)("td",{parentName:"tr",align:null},"N"),(0,l.kt)("td",{parentName:"tr",align:null},"Unleash::Bootstrap::Configuration"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"nil"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"strategies")),(0,l.kt)("td",{parentName:"tr",align:null},"Strategies manager that holds all strategies and allows to add custom strategies"),(0,l.kt)("td",{parentName:"tr",align:null},"N"),(0,l.kt)("td",{parentName:"tr",align:null},"Unleash::Strategies"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Unleash::Strategies.new"))))),(0,l.kt)("p",null,"For a more in-depth look, please see ",(0,l.kt)("inlineCode",{parentName:"p"},"lib/unleash/configuration.rb"),"."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Environment Variable"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UNLEASH_BOOTSTRAP_FILE")),(0,l.kt)("td",{parentName:"tr",align:null},"File to read bootstrap data from")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UNLEASH_BOOTSTRAP_URL")),(0,l.kt)("td",{parentName:"tr",align:null},"URL to read bootstrap data from")))),(0,l.kt)("h2",{id:"usage-in-a-plain-ruby-application"},"Usage in a plain Ruby Application"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'unleash'\nrequire 'unleash/context'\n\n@unleash = Unleash::Client.new(app_name: 'my_ruby_app', url: 'https://unleash.herokuapp.com/api', custom_http_headers: { 'Authorization': '<API token>' })\n\nfeature_name = \"AwesomeFeature\"\nunleash_context = Unleash::Context.new\nunleash_context.user_id = 123\n\nif @unleash.is_enabled?(feature_name, unleash_context)\n  puts \" #{feature_name} is enabled according to unleash\"\nelse\n  puts \" #{feature_name} is disabled according to unleash\"\nend\n\nif @unleash.is_disabled?(feature_name, unleash_context)\n  puts \" #{feature_name} is disabled according to unleash\"\nelse\n  puts \" #{feature_name} is enabled according to unleash\"\nend\n")),(0,l.kt)("h2",{id:"usage-in-a-rails-application"},"Usage in a Rails Application"),(0,l.kt)("h4",{id:"add-initializer"},"Add Initializer"),(0,l.kt)("p",null,"Put in ",(0,l.kt)("inlineCode",{parentName:"p"},"config/initializers/unleash.rb"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"Unleash.configure do |config|\n  config.app_name = Rails.application.class.parent.to_s\n  config.url      = 'https://unleash.herokuapp.com/api'\n  # config.instance_id = \"#{Socket.gethostname}\"\n  config.logger   = Rails.logger\nend\n\nUNLEASH = Unleash::Client.new\n\n# Or if preferred:\n# Rails.configuration.unleash = Unleash::Client.new\n")),(0,l.kt)("p",null,"For ",(0,l.kt)("inlineCode",{parentName:"p"},"config.instance_id")," use a string with a unique identification for the running instance.\nFor example: it could be the hostname, if you only run one App per host.\nOr the docker container id, if you are running in docker.\nIf it is not set the client will generate an unique UUID for each execution."),(0,l.kt)("p",null,"To have it available in the ",(0,l.kt)("inlineCode",{parentName:"p"},"rails console")," command as well, also add to the file above:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"Rails.application.console do\n  UNLEASH = Unleash::Client.new\n  # or\n  # Rails.configuration.unleash = Unleash::Client.new\nend\n")),(0,l.kt)("h4",{id:"add-initializer-if-using-puma-in-clustered-mode"},"Add Initializer if using ",(0,l.kt)("a",{parentName:"h4",href:"https://github.com/puma/puma#clustered-mode"},"Puma in clustered mode")),(0,l.kt)("p",null,"That is, multiple workers configured in ",(0,l.kt)("inlineCode",{parentName:"p"},"puma.rb"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},'workers ENV.fetch("WEB_CONCURRENCY") { 2 }\n')),(0,l.kt)("h5",{id:"with-preload_app"},"with ",(0,l.kt)("inlineCode",{parentName:"h5"},"preload_app!")),(0,l.kt)("p",null,"Then you may keep the client configuration still in ",(0,l.kt)("inlineCode",{parentName:"p"},"config/initializers/unleash.rb"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"Unleash.configure do |config|\n  config.app_name    = Rails.application.class.parent.to_s\n  config.url                 = 'https://unleash.herokuapp.com/api'\n  config.custom_http_headers = {'Authorization': '<API token>'}\nend\n")),(0,l.kt)("p",null,"But you must ensure that the unleash client is instantiated only after the process is forked.\nThis is done by creating the client inside the ",(0,l.kt)("inlineCode",{parentName:"p"},"on_worker_boot")," code block in ",(0,l.kt)("inlineCode",{parentName:"p"},"puma.rb")," as below:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"#...\npreload_app!\n#...\n\non_worker_boot do\n  # ...\n\n  ::UNLEASH = Unleash::Client.new\nend\n\non_worker_shutdown do\n  ::UNLEASH.shutdown\nend\n")),(0,l.kt)("h5",{id:"without-preload_app"},"without ",(0,l.kt)("inlineCode",{parentName:"h5"},"preload_app!")),(0,l.kt)("p",null,"By not using ",(0,l.kt)("inlineCode",{parentName:"p"},"preload_app!"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the ",(0,l.kt)("inlineCode",{parentName:"li"},"Rails")," constant will NOT be available."),(0,l.kt)("li",{parentName:"ul"},"but phased restarts will be possible.")),(0,l.kt)("p",null,"You need to ensure that in ",(0,l.kt)("inlineCode",{parentName:"p"},"puma.rb"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"loading unleash sdk with ",(0,l.kt)("inlineCode",{parentName:"li"},"require 'unleash'")," explicitly, as it will not be pre-loaded."),(0,l.kt)("li",{parentName:"ul"},"all parameters must be explicitly set in the ",(0,l.kt)("inlineCode",{parentName:"li"},"on_worker_boot")," block, as ",(0,l.kt)("inlineCode",{parentName:"li"},"config/initializers/unleash.rb")," is not read."),(0,l.kt)("li",{parentName:"ul"},"there are no references to ",(0,l.kt)("inlineCode",{parentName:"li"},"Rails")," constant, as that is not yet available.")),(0,l.kt)("p",null,"Example for ",(0,l.kt)("inlineCode",{parentName:"p"},"puma.rb"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'unleash'\n\n#...\n# no preload_app!\n\non_worker_boot do\n  # ...\n\n  ::UNLEASH = Unleash::Client.new(\n    app_name: 'my_rails_app',\n    url: 'https://unleash.herokuapp.com/api',\n    custom_http_headers: {'Authorization': '<API token>'},\n  )\nend\n\non_worker_shutdown do\n  ::UNLEASH.shutdown\nend\n")),(0,l.kt)("p",null,"Note that we also added shutdown hooks in ",(0,l.kt)("inlineCode",{parentName:"p"},"on_worker_shutdown"),", to ensure a clean shutdown."),(0,l.kt)("h4",{id:"add-initializer-if-using-phusion-passenger"},"Add Initializer if using ",(0,l.kt)("a",{parentName:"h4",href:"https://github.com/phusion/passenger"},"Phusion Passenger")),(0,l.kt)("p",null,"The unleash client needs to be configured and instantiated inside the ",(0,l.kt)("inlineCode",{parentName:"p"},"PhusionPassenger.on_event(:starting_worker_process)")," code block due to ",(0,l.kt)("a",{parentName:"p",href:"https://www.phusionpassenger.com/library/indepth/ruby/spawn_methods/#smart-spawning-caveats"},"smart spawning"),":"),(0,l.kt)("p",null,"The initializer in ",(0,l.kt)("inlineCode",{parentName:"p"},"config/initializers/unleash.rb")," should look like:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"PhusionPassenger.on_event(:starting_worker_process) do |forked|\n  if forked\n    Unleash.configure do |config|\n      config.app_name    = Rails.application.class.parent.to_s\n      # config.instance_id = \"#{Socket.gethostname}\"\n      config.logger      = Rails.logger\n      config.url                 = 'https://unleash.herokuapp.com/api'\n      config.custom_http_headers = {'Authorization': '<API token>'}\n    end\n\n    UNLEASH = Unleash::Client.new\n  end\nend\n")),(0,l.kt)("h4",{id:"add-initializer-hooks-when-using-within-sidekiq"},"Add Initializer hooks when using within ",(0,l.kt)("a",{parentName:"h4",href:"https://github.com/mperham/sidekiq"},"Sidekiq")),(0,l.kt)("p",null,"Note that in this case we require that the code block for ",(0,l.kt)("inlineCode",{parentName:"p"},"Unleash.configure")," is set beforehand.\nFor example in ",(0,l.kt)("inlineCode",{parentName:"p"},"config/initializers/unleash.rb"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"Sidekiq.configure_server do |config|\n  config.on(:startup) do\n    UNLEASH = Unleash::Client.new\n  end\n\n  config.on(:shutdown) do\n    UNLEASH.shutdown\n  end\nend\n")),(0,l.kt)("h4",{id:"set-unleashcontext"},"Set Unleash::Context"),(0,l.kt)("p",null,"Be sure to add the following method and callback in the application controller to have ",(0,l.kt)("inlineCode",{parentName:"p"},"@unleash_context")," set for all requests:"),(0,l.kt)("p",null,"Add in ",(0,l.kt)("inlineCode",{parentName:"p"},"app/controllers/application_controller.rb"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"  before_action :set_unleash_context\n\n  private\n  def set_unleash_context\n    @unleash_context = Unleash::Context.new(\n      session_id: session.id,\n      remote_address: request.remote_ip,\n      user_id: session[:user_id]\n    )\n  end\n")),(0,l.kt)("p",null,"Or if you see better fit, only in the controllers that you will be using unleash."),(0,l.kt)("h4",{id:"sample-usage"},"Sample usage"),(0,l.kt)("p",null,"Then wherever in your application that you need a feature toggle, you can use:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},'if UNLEASH.is_enabled? "AwesomeFeature", @unleash_context\n  puts "AwesomeFeature is enabled"\nend\n')),(0,l.kt)("p",null,"or if client is set in ",(0,l.kt)("inlineCode",{parentName:"p"},"Rails.configuration.unleash"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},'if Rails.configuration.unleash.is_enabled? "AwesomeFeature", @unleash_context\n  puts "AwesomeFeature is enabled"\nend\n')),(0,l.kt)("p",null,"If you don't want to check a feature is disabled with ",(0,l.kt)("inlineCode",{parentName:"p"},"unless"),", you can also use ",(0,l.kt)("inlineCode",{parentName:"p"},"is_disabled?"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},'# so instead of:\nunless UNLEASH.is_enabled? "AwesomeFeature", @unleash_context\n  puts "AwesomeFeature is disabled"\nend\n\n# it might be more intelligible:\nif UNLEASH.is_disabled? "AwesomeFeature", @unleash_context\n  puts "AwesomeFeature is disabled"\nend\n')),(0,l.kt)("p",null,"If the feature is not found in the server, it will by default return false.\nHowever, you can override that by setting the default return value to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},'if UNLEASH.is_enabled? "AwesomeFeature", @unleash_context, true\n  puts "AwesomeFeature is enabled by default"\nend\n# or\nif UNLEASH.is_disabled? "AwesomeFeature", @unleash_context, true\n  puts "AwesomeFeature is disabled by default"\nend\n')),(0,l.kt)("p",null,"Another possibility is to send a block, ",(0,l.kt)("a",{parentName:"p",href:"https://ruby-doc.org/core-3.0.1/Kernel.html#method-i-lambda"},"Lambda")," or ",(0,l.kt)("a",{parentName:"p",href:"https://ruby-doc.org/core-3.0.1/Proc.html#method-i-yield"},"Proc"),"\nto evaluate the default value:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},'net_check_proc = proc do |feature_name, context|\n  context.remote_address.starts_with?("10.0.0.")\nend\n\nif UNLEASH.is_enabled?("AwesomeFeature", @unleash_context, &net_check_proc)\n  puts "AwesomeFeature is enabled by default if you are in the 10.0.0.* network."\nend\n')),(0,l.kt)("p",null,"or"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},'awesomeness = 10\n@unleash_context.properties[:coolness] = 10\n\nif UNLEASH.is_enabled?("AwesomeFeature", @unleash_context) { |feat, ctx| awesomeness >= 6 && ctx.properties[:coolness] >= 8 }\n  puts "AwesomeFeature is enabled by default if both the user has a high enough coolness and the application has a high enough awesomeness"\nend\n')),(0,l.kt)("p",null,"Note:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The block/lambda/proc can use feature name and context as an arguments."),(0,l.kt)("li",{parentName:"ul"},"The client will evaluate the fallback function once per call of ",(0,l.kt)("inlineCode",{parentName:"li"},"is_enabled()"),".\nPlease keep this in mind when creating your fallback function!"),(0,l.kt)("li",{parentName:"ul"},"The returned value of the block should be a boolean.\nHowever, the client will coerce the result to boolean via ",(0,l.kt)("inlineCode",{parentName:"li"},"!!"),"."),(0,l.kt)("li",{parentName:"ul"},"If both a ",(0,l.kt)("inlineCode",{parentName:"li"},"default_value")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"fallback_function")," are supplied,\nthe client will define the default value by ",(0,l.kt)("inlineCode",{parentName:"li"},"OR"),"ing the default value and the output of the fallback function.")),(0,l.kt)("p",null,"Alternatively by using ",(0,l.kt)("inlineCode",{parentName:"p"},"if_enabled")," (or ",(0,l.kt)("inlineCode",{parentName:"p"},"if_disabled"),") you can send a code block to be executed as a parameter:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},'UNLEASH.if_enabled "AwesomeFeature", @unleash_context, true do\n  puts "AwesomeFeature is enabled by default"\nend\n')),(0,l.kt)("p",null,"Note: ",(0,l.kt)("inlineCode",{parentName:"p"},"if_enabled")," (and ",(0,l.kt)("inlineCode",{parentName:"p"},"if_disabled"),") only support ",(0,l.kt)("inlineCode",{parentName:"p"},"default_value"),", but not ",(0,l.kt)("inlineCode",{parentName:"p"},"fallback_function"),"."),(0,l.kt)("h5",{id:"variations"},"Variations"),(0,l.kt)("p",null,"If no variant is found in the server, use the fallback variant."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},'fallback_variant = Unleash::Variant.new(name: \'default\', enabled: true, payload: {"color" => "blue"})\nvariant = UNLEASH.get_variant "ColorVariants", @unleash_context, fallback_variant\n\nputs "variant color is: #{variant.payload.fetch(\'color\')}"\n')),(0,l.kt)("h2",{id:"bootstrapping"},"Bootstrapping"),(0,l.kt)("p",null,"Bootstrap configuration allows the client to be initialized with a predefined set of toggle states.\nBootstrapping can be configured by providing a bootstrap configuration when initializing the client."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"@unleash = Unleash::Client.new(\n    url: 'https://unleash.herokuapp.com/api',\n    app_name: 'my_ruby_app',\n    custom_http_headers: { 'Authorization': '<API token>' },\n    bootstrap_config: Unleash::Bootstrap::Configuration.new({\n        url: \"https://unleash.herokuapp.com/api/client/features\",\n        url_headers: {'Authorization': '<API token>'}\n    })\n)\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Bootstrap::Configuration")," initializer takes a hash with one of the following options specified:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"file_path")," - An absolute or relative path to a file containing a JSON string of the response body from the Unleash server. This can also be set though the ",(0,l.kt)("inlineCode",{parentName:"li"},"UNLEASH_BOOTSTRAP_FILE")," environment variable."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"url")," - A url pointing to an Unleash server's features endpoint, the code sample above is illustrative. This can also be set though the ",(0,l.kt)("inlineCode",{parentName:"li"},"UNLEASH_BOOTSTRAP_URL")," environment variable."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"url_headers")," - Headers for the GET http request to the ",(0,l.kt)("inlineCode",{parentName:"li"},"url")," above. Only used if the ",(0,l.kt)("inlineCode",{parentName:"li"},"url")," parameter is also set. If this option isn't set then the bootstrapper will use the same url headers as the Unleash client."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data")," - A raw JSON string as returned by the Unleash server."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"block")," - A lambda containing custom logic if you need it, an example is provided below.")),(0,l.kt)("p",null,"You should only specify one type of bootstrapping since only one will be invoked and the others will be ignored.\nThe order of preference is as follows:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Select a data bootstrapper if it exists."),(0,l.kt)("li",{parentName:"ul"},"If no data bootstrapper exists, select the block bootstrapper."),(0,l.kt)("li",{parentName:"ul"},"If no block bootstrapper exists, select the file bootstrapper from either parameters or the specified environment variable."),(0,l.kt)("li",{parentName:"ul"},"If no file bootstrapper exists, then check for a URL bootstrapper from either the parameters or the specified environment variable.")),(0,l.kt)("p",null,"Example usage:"),(0,l.kt)("p",null,"First saving the toggles locally:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"curl -H 'Authorization: <API token>' -XGET 'https://unleash.herokuapp.com/api' > ./default-toggles.json\n")),(0,l.kt)("p",null,"Now using them on start up:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"\ncustom_boostrapper = lambda {\n  File.read('./default-toggles.json')\n}\n\n@unleash = Unleash::Client.new(\n    app_name: 'my_ruby_app',\n    url: 'https://unleash.herokuapp.com/api',\n    custom_http_headers: { 'Authorization': '<API token>' },\n    bootstrap_config: Unleash::Bootstrap::Configuration.new({\n        block: custom_boostrapper\n    })\n)\n")),(0,l.kt)("p",null,"This example could be easily achieved with a file bootstrapper, this is just to illustrate the usage of custom bootstrapping.\nBe aware that the client initializer will block until bootstrapping is complete."),(0,l.kt)("h4",{id:"client-methods"},"Client methods"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Method Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Return Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"is_enabled?")),(0,l.kt)("td",{parentName:"tr",align:null},"Check if feature toggle is to be enabled or not."),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"enabled?")),(0,l.kt)("td",{parentName:"tr",align:null},"Alias to the ",(0,l.kt)("inlineCode",{parentName:"td"},"is_enabled?")," method. But more ruby idiomatic."),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"if_enabled")),(0,l.kt)("td",{parentName:"tr",align:null},"Run a code block, if a feature is enabled."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"yield"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"is_disabled?")),(0,l.kt)("td",{parentName:"tr",align:null},"Check if feature toggle is to be enabled or not."),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"disabled?")),(0,l.kt)("td",{parentName:"tr",align:null},"Alias to the ",(0,l.kt)("inlineCode",{parentName:"td"},"is_disabled?")," method. But more ruby idiomatic."),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"if_disabled")),(0,l.kt)("td",{parentName:"tr",align:null},"Run a code block, if a feature is disabled."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"yield"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"get_variant")),(0,l.kt)("td",{parentName:"tr",align:null},"Get variant for a given feature"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Unleash::Variant"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"shutdown")),(0,l.kt)("td",{parentName:"tr",align:null},"Save metrics to disk, flush metrics to server, and then kill ToggleFetcher and MetricsReporter threads. A safe shutdown. Not really useful in long running applications, like web applications."),(0,l.kt)("td",{parentName:"tr",align:null},"nil")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"shutdown!")),(0,l.kt)("td",{parentName:"tr",align:null},"Kill ToggleFetcher and MetricsReporter threads immediately."),(0,l.kt)("td",{parentName:"tr",align:null},"nil")))),(0,l.kt)("p",null,"For the full method signatures, please see ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/Unleash/unleash-client-ruby/blob/main/lib/unleash/client.rb"},"client.rb")),(0,l.kt)("h2",{id:"local-test-client"},"Local test client"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"# cli unleash client:\nbundle exec bin/unleash-client --help\n\n# or a simple sample implementation (with values hardcoded):\nbundle exec examples/simple.rb\n")),(0,l.kt)("h2",{id:"available-strategies"},"Available Strategies"),(0,l.kt)("p",null,"This client comes with the all the required strategies out of the box:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"ApplicationHostnameStrategy"),(0,l.kt)("li",{parentName:"ul"},"DefaultStrategy"),(0,l.kt)("li",{parentName:"ul"},"FlexibleRolloutStrategy"),(0,l.kt)("li",{parentName:"ul"},"GradualRolloutRandomStrategy"),(0,l.kt)("li",{parentName:"ul"},"GradualRolloutSessionIdStrategy"),(0,l.kt)("li",{parentName:"ul"},"GradualRolloutUserIdStrategy"),(0,l.kt)("li",{parentName:"ul"},"RemoteAddressStrategy"),(0,l.kt)("li",{parentName:"ul"},"UnknownStrategy"),(0,l.kt)("li",{parentName:"ul"},"UserWithIdStrategy")),(0,l.kt)("h2",{id:"custom-strategies"},"Custom Strategies"),(0,l.kt)("p",null,"Client allows to add ",(0,l.kt)("a",{parentName:"p",href:"https://docs.getunleash.io/advanced/custom_activation_strategy"},"custom activation strategies")," using configuration.\nIn order for strategy to work correctly it should support two methods ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"is_enabled?")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"class MyCustomStrategy\n  def name\n    'myCustomStrategy'\n  end\n\n  def is_enabled?(params = {}, context = nil)\n    true\n  end\nend\n\nUnleash.configure do |config|\n  config.strategies.add(MyCustomStrategy.new)\nend\n")),(0,l.kt)("h2",{id:"development"},"Development"),(0,l.kt)("p",null,"After checking out the repo, run ",(0,l.kt)("inlineCode",{parentName:"p"},"bin/setup")," to install dependencies.\nThen, run ",(0,l.kt)("inlineCode",{parentName:"p"},"rake spec")," to run the tests.\nYou can also run ",(0,l.kt)("inlineCode",{parentName:"p"},"bin/console")," for an interactive prompt that will allow you to experiment."),(0,l.kt)("p",null,"This SDK is also built against the Unleash Client Specification tests.\nTo run the Ruby SDK against this test suite, you'll need to have a copy on your machine, you can clone the repository directly using:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"git clone --depth 5 --branch v4.3.3 https://github.com/Unleash/client-specification.git client-specification")),(0,l.kt)("p",null,"After doing this, ",(0,l.kt)("inlineCode",{parentName:"p"},"rake spec")," will also run the client specification tests."),(0,l.kt)("p",null,"To install this gem onto your local machine, run ",(0,l.kt)("inlineCode",{parentName:"p"},"bundle exec rake install"),"."),(0,l.kt)("h2",{id:"releasing"},"Releasing"),(0,l.kt)("p",null,"Choose a new version number following ",(0,l.kt)("a",{parentName:"p",href:"https://semver.org/spec/v2.0.0.html"},"Semantic Versioning")," semantics and then:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"update the version number in ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/Unleash/unleash-client-ruby/blob/main/./lib/unleash/version.rb"},"./lib/unleash/version.rb"),","),(0,l.kt)("li",{parentName:"ul"},"if a major or minor version bump, update the ",(0,l.kt)("a",{parentName:"li",href:"#installation"},"Installation section")," in ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/Unleash/unleash-client-ruby/blob/main/README.md"},"README.md")),(0,l.kt)("li",{parentName:"ul"},"update ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/Unleash/unleash-client-ruby/blob/main/CHANGELOG.md"},"CHANGELOG.md")," following the format on ",(0,l.kt)("a",{parentName:"li",href:"https://keepachangelog.com/en/1.1.0/"},"Keep a Changelog")),(0,l.kt)("li",{parentName:"ul"},"commit with message ",(0,l.kt)("inlineCode",{parentName:"li"},"chore: bump version to x.y.z")),(0,l.kt)("li",{parentName:"ul"},"then run ",(0,l.kt)("inlineCode",{parentName:"li"},"bundle exec rake release"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"This will create a git tag for the version on the current commit,"),(0,l.kt)("li",{parentName:"ul"},"push git commits and tags to origin and"),(0,l.kt)("li",{parentName:"ul"},"push the ",(0,l.kt)("inlineCode",{parentName:"li"},".gem")," file to ",(0,l.kt)("a",{parentName:"li",href:"https://rubygems.org"},"rubygems.org"))))),(0,l.kt)("h2",{id:"contributing"},"Contributing"),(0,l.kt)("p",null,"Bug reports and pull requests are welcome on GitHub at ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/unleash/unleash-client-ruby"},"https://github.com/unleash/unleash-client-ruby"),"."),(0,l.kt)("p",null,"Be sure to run both ",(0,l.kt)("inlineCode",{parentName:"p"},"bundle exec rspec")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"bundle exec rubocop")," in your branch before creating a pull request."),(0,l.kt)("p",null,"Please include tests with any pull requests, to avoid regressions."),(0,l.kt)("hr",null),(0,l.kt)("p",null,"This content was generated on ",(0,l.kt)("time",{dateTime:"2023-10-15T00:15:15.006Z"},"15 October 2023 at 00:15:15 Coordinated Universal Time")))}d.isMDXComponent=!0}}]);