"use strict";(self.webpackChunkwebsitev_2=self.webpackChunkwebsitev_2||[]).push([[4213],{92763:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var a=n(87462),s=(n(67294),n(3905));const i={id:"securing-unleash-v3",title:"Securing Unleash v3"},l=void 0,o={unversionedId:"deploy/securing-unleash-v3",id:"deploy/securing-unleash-v3",title:"Securing Unleash v3",description:"This guide is only relevant if you are using Unleash Open-Source. The Enterprise edition does already ship with a secure setup and multiple SSO options.",source:"@site/docs/deploy/securing-unleash-v3.md",sourceDirName:"deploy",slug:"/deploy/securing-unleash-v3",permalink:"/deploy/securing-unleash-v3",draft:!1,editUrl:"https://github.com/Unleash/unleash/edit/main/website/docs/deploy/securing-unleash-v3.md",tags:[],version:"current",frontMatter:{id:"securing-unleash-v3",title:"Securing Unleash v3"}},r={},u=[{value:"General settings",id:"general-settings",level:2},{value:"Securing the Admin API",id:"securing-the-admin-api",level:2},{value:"Securing the Client API",id:"securing-the-client-api",level:2}],h={toc:u};function p(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"This guide is only relevant if you are using Unleash Open-Source. The Enterprise edition does already ship with a secure setup and multiple SSO options.")),(0,s.kt)("p",null,"The Unleash API is split into two different paths: ",(0,s.kt)("inlineCode",{parentName:"p"},"/api/client")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"/api/admin"),". This makes it easy to have different authentication strategy for the admin interface and the client-api used by the applications integrating with Unleash."),(0,s.kt)("h2",{id:"general-settings"},"General settings"),(0,s.kt)("p",null,"Unleash uses an encrypted cookie to maintain a user session. This allows users to be logged in across multiple instances of Unleash. To protect this cookie, Unleash will automatically generate a secure token the first time you start Unleash."),(0,s.kt)("h2",{id:"securing-the-admin-api"},"Securing the Admin API"),(0,s.kt)("p",null,"To secure the Admin API, you have to tell Unleash that you are using a custom admin authentication and implement your authentication logic as a preHook."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const unleash = require('unleash-server');\nconst myCustomAdminAuth = require('./auth-hook');\n\nunleash\n  .start({\n    databaseUrl: 'postgres://unleash_user:passord@localhost:5432/unleash',\n    adminAuthentication: 'custom',\n    preRouterHook: myCustomAdminAuth,\n  })\n  .then((unleash) => {\n    console.log(\n      `Unleash started on http://localhost:${unleash.app.get('port')}`,\n    );\n  });\n")),(0,s.kt)("p",null,"Additionally, you can trigger the admin interface to prompt the user to sign in by configuring your middleware to return a ",(0,s.kt)("inlineCode",{parentName:"p"},"401")," status on protected routes. The response body must contain a ",(0,s.kt)("inlineCode",{parentName:"p"},"message")," and a ",(0,s.kt)("inlineCode",{parentName:"p"},"path")," used to redirect the user to the proper login route."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "message": "You must be logged in to use Unleash",\n  "path": "/custom/login"\n}\n')),(0,s.kt)("p",null,"Examples of custom authentication hooks:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/Unleash/unleash-examples/blob/7ed25f97a31dfd8f773c00847080b1a4c889fd87/v3/securing-google-auth/google-auth-hook.js"},"google-auth-hook.js")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/Unleash/unleash-examples/blob/7ed25f97a31dfd8f773c00847080b1a4c889fd87/v3/securing-basic-auth/basic-auth-hook.js"},"basic-auth-hook.js")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/Unleash/unleash-examples/blob/7ed25f97a31dfd8f773c00847080b1a4c889fd87/v3/securing-keycloak-auth/keycloak-auth-hook.js"},"keycloak-auth-hook.js"))),(0,s.kt)("h2",{id:"securing-the-client-api"},"Securing the Client API"),(0,s.kt)("p",null,"A common way to support client access is to use pre-shared secrets. This can be solved by having clients send a shared key in an HTTP header with every client request to the Unleash API. All official Unleash clients should support this."),(0,s.kt)("p",null,"In the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/Unleash/unleash-client-java#custom-http-headers"},"Java client")," this would look like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'UnleashConfig unleashConfig = UnleashConfig.builder()\n  .appName("my-app")\n  .instanceId("my-instance-1")\n  .unleashAPI(unleashAPI)\n  .customHttpHeader("Authorization", "12312Random")\n  .build();\n')),(0,s.kt)("p",null,"On the Unleash server side, you need to implement a preRouter hook which verifies that all calls to ",(0,s.kt)("inlineCode",{parentName:"p"},"/api/client")," include this pre-shared key in the defined header. This could look something like this."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const unleash = require('unleash-server');\nconst sharedSecret = '12312Random';\n\nunleash\n  .start({\n    databaseUrl: 'postgres://unleash_user:passord@localhost:5432/unleash',\n    preRouterHook: (app) => {\n      app.use('/api/client', (req, res, next) => {\n        if (req.header('authorization') !== sharedSecret) {\n          res.sendStatus(401);\n        } else {\n          next();\n        }\n      });\n    },\n  })\n  .then((unleash) => {\n    console.log(\n      `Unleash started on http://localhost:${unleash.app.get('port')}`,\n    );\n  });\n")),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/Unleash/unleash-examples/blob/7ed25f97a31dfd8f773c00847080b1a4c889fd87/v3/securing-client-auth/index.js"},"client-auth-unleash.js")))}p.isMDXComponent=!0}}]);