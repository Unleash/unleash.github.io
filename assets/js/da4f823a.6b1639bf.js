"use strict";(self.webpackChunkwebsitev_2=self.webpackChunkwebsitev_2||[]).push([[5027],{74124:(e,t,a)=>{a.d(t,{Z:()=>p});var n=a(87462),l=a(67294),s=a(86010),o=a(5730),i=a(20636),r=a(76602),u=a(63735);const h="tabList__CuJ",c="tabItem_LNqP";function d(e){var t;const{lazy:a,block:o,defaultValue:d,values:p,groupId:m,className:v}=e,g=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),k=p??g.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),f=(0,i.l)(k,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===d?d:d??(null==(t=g.find((e=>e.props.default)))?void 0:t.props.value)??g[0].props.value;if(null!==b&&!k.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${k.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:w,setTabGroupChoices:y}=(0,r.U)(),[U,N]=(0,l.useState)(b),I=[],{blockElementScrollPositionUntilNextRender:x}=(0,u.o5)();if(null!=m){const e=w[m];null!=e&&e!==U&&k.some((t=>t.value===e))&&N(e)}const C=e=>{const t=e.currentTarget,a=I.indexOf(t),n=k[a].value;n!==U&&(x(t),N(n),null!=m&&y(m,String(n)))},S=e=>{var t;let a=null;switch(e.key){case"Enter":C(e);break;case"ArrowRight":{const t=I.indexOf(e.currentTarget)+1;a=I[t]??I[0];break}case"ArrowLeft":{const t=I.indexOf(e.currentTarget)-1;a=I[t]??I[I.length-1];break}}null==(t=a)||t.focus()};return l.createElement("div",{className:(0,s.Z)("tabs-container",h)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":o},v)},k.map((e=>{let{value:t,label:a,attributes:o}=e;return l.createElement("li",(0,n.Z)({role:"tab",tabIndex:U===t?0:-1,"aria-selected":U===t,key:t,ref:e=>I.push(e),onKeyDown:S,onClick:C},o,{className:(0,s.Z)("tabs__item",c,null==o?void 0:o.className,{"tabs__item--active":U===t})}),a??t)}))),a?(0,l.cloneElement)(g.filter((e=>e.props.value===U))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==U})))))}function p(e){const t=(0,o.Z)();return l.createElement(d,(0,n.Z)({key:String(t)},e))}},41645:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>h,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>u,toc:()=>c});var n=a(87462),l=(a(67294),a(3905)),s=a(74124),o=a(11666);const i={id:"java_sdk",title:"Java SDK"},r=void 0,u={unversionedId:"sdks/java_sdk",id:"sdks/java_sdk",title:"Java SDK",description:"In this guide we explain how to use feature toggles in a Java application using Unleash-hosted. We will be using the open source Unleash Java Client SDK.",source:"@site/docs/sdks/java.md",sourceDirName:"sdks",slug:"/sdks/java_sdk",permalink:"/sdks/java_sdk",draft:!1,editUrl:"https://github.com/Unleash/unleash/edit/main/website/docs/sdks/java.md",tags:[],version:"current",frontMatter:{id:"java_sdk",title:"Java SDK"},sidebar:"documentation",previous:{title:"GO SDK",permalink:"/sdks/go_sdk"},next:{title:"Node SDK",permalink:"/sdks/node_sdk"}},h={},c=[{value:"Step 1: Install the client SDK",id:"step-1-install-the-client-sdk",level:2},{value:"Step 2: Create a new Unleash Instance",id:"step-2-create-a-new-unleash-instance",level:2},{value:"Step 3: Use the feature toggle",id:"step-3-use-the-feature-toggle",level:2},{value:"Step 4: Provide Unleash Context",id:"step-4-provide-unleash-context",level:2}],d={toc:c};function p(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"In this guide we explain how to use feature toggles in a Java application using Unleash-hosted. We will be using the open source Unleash ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/Unleash/unleash-client-java"},"Java Client SDK"),"."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"You will need your ",(0,l.kt)("inlineCode",{parentName:"p"},"API URL")," and your ",(0,l.kt)("inlineCode",{parentName:"p"},"API token")," in order to connect the Client SDK to you Unleash instance. You can find this information in the \u201cAdmin\u201d section Unleash management UI. ",(0,l.kt)("a",{parentName:"p",href:"../user_guide/api-token"},"Read more"))),(0,l.kt)("h2",{id:"step-1-install-the-client-sdk"},"Step 1: Install the client SDK"),(0,l.kt)("p",null,"First we must add Unleash Client SDK as a dependency to your project. Below is an example of how you would add it to your pom.xml in Java:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n    <groupId>io.getunleash</groupId>\n    <artifactId>unleash-client-java</artifactId>\n    <version>Latest version here</version>\n</dependency>\n")),(0,l.kt)("h2",{id:"step-2-create-a-new-unleash-instance"},"Step 2: Create a new Unleash Instance"),(0,l.kt)("p",null,"Next we must initialize a new instance of the Unleash Client."),(0,l.kt)("admonition",{title:"Synchronous initialization",type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"The client SDK will synchronize with the Unleash API on initialization, so it can take a few hundred milliseconds for the client to reach the correct state. You can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"synchronousFetchOnInitialisation")," option to block the client until it has successfully synced with the server.")),(0,l.kt)(s.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"async",label:"Asynchronous initialization",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'UnleashConfig config = UnleashConfig.builder()\n        .appName("my.java-app")\n        .instanceId("your-instance-1")\n        .environment(System.getenv("APP_ENV"))\n        .unleashAPI("API URL")\n        .customHttpHeader("Authorization", "API token")\n        .build();\n\nUnleash unleash = new DefaultUnleash(config);\n'))),(0,l.kt)(o.Z,{value:"sync",label:"Synchronous initializiation",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'UnleashConfig config = UnleashConfig.builder()\n        .appName("my.java-app")\n        .instanceId("your-instance-1")\n        .environment(System.getenv("APP_ENV"))\n        .unleashAPI("API URL")\n        .customHttpHeader("Authorization", "API token")\n        .synchronousFetchOnInitialization(true)\n        .build();\n\nUnleash unleash = new DefaultUnleash(config);\n')))),(0,l.kt)("p",null,"In your app you typically just want one instance of Unleash, and inject that where you need it. You will typically use a dependency injection frameworks such as Spring or Guice to manage this."),(0,l.kt)("p",null,"You should change the URL and the Authorization header (API token) with the correct values for your instance, which you may locate under \u201cInstance admin\u201d in the menu."),(0,l.kt)("h2",{id:"step-3-use-the-feature-toggle"},"Step 3: Use the feature toggle"),(0,l.kt)("p",null,"Now that we have initialized the client SDK we can start using feature toggles defined in Unleash in our application. To achieve this we have the \u201cisEnabled\u201d method available, which will allow us to check the value of a feature toggle. This method will return ",(0,l.kt)("strong",{parentName:"p"},"true")," or ",(0,l.kt)("strong",{parentName:"p"},"false")," based on whether the feature should be enabled or disabled for the current request."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'if(unleash.isEnabled("AwesomeFeature")) {\n  //do some magic\n} else {\n  //do old boring stuff\n}\n')),(0,l.kt)("p",null,"Read more about the ",(0,l.kt)("a",{parentName:"p",href:"https://www.unleash-hosted.com/articles/our-unique-architecture"},"Unleash architecture")," to learn how it works in more details"),(0,l.kt)("h2",{id:"step-4-provide-unleash-context"},"Step 4: Provide Unleash Context"),(0,l.kt)("p",null,"It is the client SDK that computes whether a feature toggle should be considered enabled or disabled for specific use request. This is the job of the ",(0,l.kt)("a",{parentName:"p",href:"/user_guide/activation_strategy"},"activation strategies"),", which are implemented in the client SDK."),(0,l.kt)("p",null,"The activation strategies is an implementation of rules based on data, which you provide as part of the Unleash Context."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"a) As argument to the isEnabled call")),(0,l.kt)("p",null,"The simplest way to provide the Unleash Context is as part of the \u201cisEnabled\u201d call:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'UnleashContext context = UnleashContext.builder()\n  .userId("user@mail.com").build();\n\nunleash.isEnabled("someToggle", context);\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"b) Via a UnleashContextProvider")),(0,l.kt)("p",null,"This is a bit more advanced approach, where you configure a unleash-context provider. By doing this you do not have to rebuild or to pass the unleash-context object to every place you are calling ",(0,l.kt)("inlineCode",{parentName:"p"},"unleash.isEnabled"),"."),(0,l.kt)("p",null,"The provider typically binds the context to the same thread as the request. If you are using Spring the UnleashContextProvider will typically be a \u2018request scoped\u2019 bean."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'UnleashContextProvider contextProvider = new MyAwesomeContextProvider();\nUnleashConfig config = new UnleashConfig.Builder()\n            .appName("java-test")\n            .instanceId("instance x")\n            .unleashAPI("https://unleash.example.com/api/")\n            .unleashContextProvider(contextProvider)\n            .build();\n\nUnleash unleash = new DefaultUnleash(config);\n\n// Anywhere in the code unleash will get the unleash context from your registered provider.\nunleash.isEnabled("someToggle");\n')))}p.isMDXComponent=!0}}]);