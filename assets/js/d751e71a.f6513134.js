"use strict";(self.webpackChunkwebsitev_2=self.webpackChunkwebsitev_2||[]).push([[65634],{96588:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>p});var a=n(87462),s=(n(67294),n(3905));const l={title:"PHP",slug:"/reference/sdks/php",custom_edit_url:"https://github.com/Unleash/unleash-client-php/edit/main/README.md"},i=void 0,r={unversionedId:"generated/sdks/server-side/php",id:"generated/sdks/server-side/php",title:"PHP",description:"This document was generated from the README in the PHP GitHub repository.",source:"@site/docs/generated/sdks/server-side/php.md",sourceDirName:"generated/sdks/server-side",slug:"/reference/sdks/php",permalink:"/reference/sdks/php",draft:!1,editUrl:"https://github.com/Unleash/unleash-client-php/edit/main/README.md",tags:[],version:"current",frontMatter:{title:"PHP",slug:"/reference/sdks/php",custom_edit_url:"https://github.com/Unleash/unleash-client-php/edit/main/README.md"},sidebar:"documentation",previous:{title:"Node",permalink:"/reference/sdks/node"},next:{title:"Python",permalink:"/reference/sdks/python"}},o={},p=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Builder",id:"builder",level:3},{value:"Required parameters",id:"required-parameters",level:4},{value:"Optional parameters",id:"optional-parameters",level:4},{value:"Proxy SDK",id:"proxy-sdk",level:2},{value:"Caching",id:"caching",level:2},{value:"Bootstrapping",id:"bootstrapping",level:2},{value:"Custom bootstrap provider",id:"custom-bootstrap-provider",level:3},{value:"Disabling communication with Unleash server",id:"disabling-communication-with-unleash-server",level:3},{value:"Strategies",id:"strategies",level:2},{value:"Default strategy",id:"default-strategy",level:3},{value:"IP address strategy",id:"ip-address-strategy",level:3},{value:"User ID strategy",id:"user-id-strategy",level:3},{value:"Gradual rollout strategy",id:"gradual-rollout-strategy",level:3},{value:"Hostname strategy",id:"hostname-strategy",level:3},{value:"Context provider",id:"context-provider",level:3},{value:"Custom strategies",id:"custom-strategies",level:3},{value:"Variants",id:"variants",level:2},{value:"Client registration",id:"client-registration",level:2},{value:"Metrics",id:"metrics",level:2},{value:"Custom headers via middleware",id:"custom-headers-via-middleware",level:2},{value:"Constraints",id:"constraints",level:2},{value:"GitLab specifics",id:"gitlab-specifics",level:2}],u={toc:p};function h(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("admonition",{title:"Generated content",type:"info"},(0,s.kt)("p",{parentName:"admonition"},"This document was generated from the README in the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/Unleash/unleash-client-php"},"PHP GitHub repository"),".")),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"To connect to Unleash, you'll need your Unleash API url (e.g. ",(0,s.kt)("inlineCode",{parentName:"p"},"https://<your-unleash>/api"),") and a ",(0,s.kt)("a",{parentName:"p",href:"/reference/api-tokens-and-client-keys#client-tokens"},"server-side API token")," (",(0,s.kt)("a",{parentName:"p",href:"/how-to/how-to-create-api-tokens"},"how do I create an API token?"),").")),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/Unleash/unleash-client-php/actions/workflows/tests.yaml"},(0,s.kt)("img",{parentName:"a",src:"https://github.com/Unleash/unleash-client-php/actions/workflows/tests.yaml/badge.svg",alt:"Tests"})),"\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/Unleash/unleash-client-php/actions/workflows/tests-8.x.yaml"},(0,s.kt)("img",{parentName:"a",src:"https://github.com/Unleash/unleash-client-php/actions/workflows/tests-8.x.yaml/badge.svg",alt:"Tests (8.x)"})),"\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/Unleash/unleash-client-php/actions/workflows/tests-7.x.yaml"},(0,s.kt)("img",{parentName:"a",src:"https://github.com/Unleash/unleash-client-php/actions/workflows/tests-7.x.yaml/badge.svg",alt:"Tests (7.x)"})),"\n",(0,s.kt)("a",{parentName:"p",href:"https://coveralls.io/github/Unleash/unleash-client-php?branch=main"},(0,s.kt)("img",{parentName:"a",src:"https://img.shields.io/coverallsCoverage/github/Unleash/unleash-client-php?label=Code%20Coverage",alt:"Coverage Status"})),"\n",(0,s.kt)("a",{parentName:"p",href:"https://packagist.org/packages/unleash/client"},(0,s.kt)("img",{parentName:"a",src:"https://img.shields.io/packagist/dt/unleash/client.svg",alt:"Download"}))),(0,s.kt)("p",null,"A PHP implementation of the ",(0,s.kt)("a",{parentName:"p",href:"https://www.getunleash.io/"},"Unleash protocol"),"\naka ",(0,s.kt)("a",{parentName:"p",href:"https://docs.gitlab.com/ee/operations/feature_flags.html"},"Feature Flags")," in GitLab."),(0,s.kt)("p",null,"You may also be interested in the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/Unleash/unleash-client-symfony"},"Symfony Bundle")," for this package."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Unleash allows you to gradually release your app's feature before doing a full release based on multiple strategies\nlike releasing to only specific users or releasing to a percentage of your user base. Read more in the above linked\ndocumentations.")),(0,s.kt)("h2",{id:"installation"},"Installation"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"composer require unleash/client")),(0,s.kt)("p",null,"Requires PHP 7.2 or newer."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"You will also need some implementation of ",(0,s.kt)("a",{parentName:"p",href:"https://packagist.org/providers/psr/http-client-implementation"},"PSR-18"),"\nand ",(0,s.kt)("a",{parentName:"p",href:"https://packagist.org/providers/psr/http-factory-implementation"},"PSR-17"),", for example\n",(0,s.kt)("a",{parentName:"p",href:"https://packagist.org/packages/guzzlehttp/guzzle"},"Guzzle"),"\nand ",(0,s.kt)("a",{parentName:"p",href:"https://packagist.org/providers/psr/simple-cache-implementation"},"PSR-16"),", for example\n",(0,s.kt)("a",{parentName:"p",href:"https://packagist.org/packages/symfony/cache"},"Symfony Cache"),".\nExample:")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"composer require unleash/client guzzlehttp/guzzle symfony/cache")),(0,s.kt)("p",null,"or"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"composer require unleash/client symfony/http-client nyholm/psr7 symfony/cache")),(0,s.kt)("p",null,"If you want to make use of events you also need to install ",(0,s.kt)("inlineCode",{parentName:"p"},"symfony/event-dispatcher"),".\nSee ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/Unleash/unleash-client-php/blob/main/doc/events.md"},"event documentation here"),"."),(0,s.kt)("h2",{id:"usage"},"Usage"),(0,s.kt)("p",null,"The basic usage is getting the ",(0,s.kt)("inlineCode",{parentName:"p"},"Unleash")," object and checking for a feature:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Unleash\\Client\\UnleashBuilder;\n\n$unleash = UnleashBuilder::create()\n    ->withAppName('Some app name')\n    ->withAppUrl('https://some-app-url.com')\n    ->withInstanceId('Some instance id')\n    ->build();\n\nif ($unleash->isEnabled('some-feature-name')) {\n    // do something\n}\n")),(0,s.kt)("p",null,"You can (and in some cases you must) also provide a context object. If the feature doesn't exist on the server\nyou will get ",(0,s.kt)("inlineCode",{parentName:"p"},"false")," from ",(0,s.kt)("inlineCode",{parentName:"p"},"isEnabled()"),", but you can change the default value to ",(0,s.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Unleash\\Client\\UnleashBuilder;\nuse Unleash\\Client\\Configuration\\UnleashContext;\n\n$unleash = UnleashBuilder::create()\n    ->withAppName('Some app name')\n    ->withAppUrl('https://some-app-url.com')\n    ->withInstanceId('Some instance id')\n    ->build();\n\n$context = new UnleashContext(\n    currentUserId: 'some-user-id-from-app',\n    ipAddress: '127.0.0.1', // will be populated automatically from $_SERVER if needed\n    sessionId: 'sess-123456', // will be populated automatically via session_id() if needed\n);\n\n// or using pre php 8 style:\n\n$context = (new UnleashContext())\n    ->setCurrentUserId('some-user-id-from-app')\n    ->setIpAddress('127.0.0.1')\n    ->setSessionId('sess-123456');\n\nif ($unleash->isEnabled('some-feature', $context)) {\n    // do something\n}\n\n// changing the default value for non-existent features\nif ($unleash->isEnabled('nonexistent-feature', $context, true)) {\n    // do something\n}\n")),(0,s.kt)("h3",{id:"builder"},"Builder"),(0,s.kt)("p",null,"The builder contains many configuration options, and it's advised to always use the builder to construct an Unleash\ninstance. The builder is immutable."),(0,s.kt)("p",null,"The builder object can be created using the ",(0,s.kt)("inlineCode",{parentName:"p"},"create()")," static method or by using its constructor:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Unleash\\Client\\UnleashBuilder;\n\n// both are the same\n$builder = new UnleashBuilder();\n$builder = UnleashBuilder::create();\n")),(0,s.kt)("p",null,"You can replace various parts of the Unleash SDK with custom implementation using the builder, like custom registration\nservice, custom metrics handler and so on."),(0,s.kt)("p",null,"Replaceable parts (some of them have further documentation below):"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"registration service (",(0,s.kt)("inlineCode",{parentName:"li"},"withRegistrationService()"),")"),(0,s.kt)("li",{parentName:"ul"},"context provider (",(0,s.kt)("inlineCode",{parentName:"li"},"withContextProvider()"),")"),(0,s.kt)("li",{parentName:"ul"},"bootstrap handler (",(0,s.kt)("inlineCode",{parentName:"li"},"withBootstrapHandler()"),")"),(0,s.kt)("li",{parentName:"ul"},"event dispatcher (",(0,s.kt)("inlineCode",{parentName:"li"},"withEventDispatcher()"),")"),(0,s.kt)("li",{parentName:"ul"},"metrics handler (",(0,s.kt)("inlineCode",{parentName:"li"},"withMetricsHandler()"),")"),(0,s.kt)("li",{parentName:"ul"},"variant handler (",(0,s.kt)("inlineCode",{parentName:"li"},"withVariantHandler()"),")")),(0,s.kt)("p",null,"Dependencies can be injected by implementing one of the following interfaces from the ",(0,s.kt)("inlineCode",{parentName:"p"},"Unleash\\Client\\Helper\\Builder")," namespace:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"CacheAware")," - injects standard cache"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"ConfigurationAware")," - injects the global configuration object"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"HttpClientAware")," - injects the http client"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"MetricsSenderAware")," - injects the metrics sender service"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"RequestFactoryAware")," - injects the request factory"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"StaleCacheAware")," - injects the stale cache handler"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"StickinessCalculatorAware")," - injects the stickiness calculator used for calculating stickiness in gradual rollout strategy")),(0,s.kt)("p",null,"In addition to the parts above these interfaces can also be implemented by these kinds of classes:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"bootstrap providers"),(0,s.kt)("li",{parentName:"ul"},"event subscribers"),(0,s.kt)("li",{parentName:"ul"},"strategy handlers")),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Some classes cannot depend on certain objects, namely any object that is present in the configuration cannot implement\nConfigurationAware (to avoid circular dependency). The same classes also cannot implement MetricsSenderAware because\nmetrics sender depends on the configuration object. You will get a \\Unleash\\Client\\Exception\\CyclicDependencyException\nif that happens.")),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Unleash\\Client\\Helper\\Builder\\ConfigurationAware;\nuse Unleash\\Client\\Metrics\\MetricsHandler;\nuse Unleash\\Client\\Configuration\\UnleashConfiguration;\nuse Unleash\\Client\\DTO\\Feature;\nuse Unleash\\Client\\DTO\\Variant;\nuse Unleash\\Client\\UnleashBuilder;\n\nfinal class CustomMetricsHandler implements MetricsHandler, ConfigurationAware\n{\n    private UnleashConfiguration $configuration;\n\n    public function setConfiguration(UnleashConfiguration $configuration): void\n    {\n        // this method gets called automatically by the builder\n        $this->configuration = $configuration;\n    }\n\n    public function handleMetrics(Feature $feature, bool $successful, Variant $variant = null): void\n    {\n        // the configuration object is available here\n        if ($this->configuration->getInstanceId() === '...') {\n            // do something\n        }\n    }\n}\n\n$instance = UnleashBuilder::create()\n    ->withMetricsHandler(new CustomMetricsHandler())\n    ->build();\n")),(0,s.kt)("h4",{id:"required-parameters"},"Required parameters"),(0,s.kt)("p",null,"The app name, instance id and app url are required as per the specification."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Unleash\\Client\\UnleashBuilder;\n\n$builder = UnleashBuilder::create()\n    ->withAppName('Some app name')\n    ->withAppUrl('https://some-app-url.com')\n    ->withInstanceId('Some instance id');\n")),(0,s.kt)("p",null,"If you're using Unleash v4 you also need to specify authorization key (API key), you can do so with custom header."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Unleash\\Client\\UnleashBuilder;\n\n$builder = UnleashBuilder::create()\n    ->withAppName('Some app name')\n    ->withAppUrl('https://some-app-url.com')\n    ->withInstanceId('Some instance id')\n    ->withHeader('Authorization', 'my-api-key');\n")),(0,s.kt)("p",null,"To filter feature toggles by tag or name prefix you can use the ",(0,s.kt)("inlineCode",{parentName:"p"},"Url")," helper:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Unleash\\Client\\UnleashBuilder;\nuse Unleash\\Client\\Helper\\Url;\n\n$builder = UnleashBuilder::create()\n    ->withAppName('Some app name')\n    ->withAppUrl(new Url('https://some-app-url.com', namePrefix: 'somePrefix.', tags: [\n        'myTag' => 'myValue',\n    ]))\n    ->withInstanceId('Some instance id');\n")),(0,s.kt)("h4",{id:"optional-parameters"},"Optional parameters"),(0,s.kt)("p",null,"Some optional parameters can be set, these include:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"http client implementation (",(0,s.kt)("a",{parentName:"li",href:"https://packagist.org/providers/psr/http-client-implementation"},"PSR-18"),")"),(0,s.kt)("li",{parentName:"ul"},"request factory implementation (",(0,s.kt)("a",{parentName:"li",href:"https://packagist.org/providers/psr/http-factory-implementation"},"PSR-17"),")"),(0,s.kt)("li",{parentName:"ul"},"cache implementation (",(0,s.kt)("a",{parentName:"li",href:"https://packagist.org/providers/psr/simple-cache-implementation"},"PSR-16"),")"),(0,s.kt)("li",{parentName:"ul"},"cache ttl"),(0,s.kt)("li",{parentName:"ul"},"available strategies"),(0,s.kt)("li",{parentName:"ul"},"http headers")),(0,s.kt)("p",null,"The builder will attempt to load http client and request factory implementations automatically. Most implementations,\nsuch as ",(0,s.kt)("a",{parentName:"p",href:"https://packagist.org/packages/guzzlehttp/guzzle"},"guzzlehttp/guzzle")," or\n",(0,s.kt)("a",{parentName:"p",href:"https://packagist.org/packages/symfony/http-client"},"symfony/http-client")," (in combination with\n",(0,s.kt)("a",{parentName:"p",href:"https://packagist.org/packages/nyholm/psr7"},"nyholm/psr7"),"), will be loaded automatically. If the builder is unable to\nlocate a http client or request factory implementation, you will need to provide some implementation on your own."),(0,s.kt)("p",null,"If you use ",(0,s.kt)("a",{parentName:"p",href:"https://packagist.org/packages/symfony/cache"},"symfony/cache")," or\n",(0,s.kt)("a",{parentName:"p",href:"https://packagist.org/packages/cache/filesystem-adapter"},"cache/filesystem-adapter")," as your cache implementation, the\ncache handler will be created automatically, otherwise you need to provide some implementation on your own."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Cache\\Adapter\\Filesystem\\FilesystemCachePool;\nuse League\\Flysystem\\Adapter\\Local;\nuse League\\Flysystem\\Filesystem;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Psr7\\HttpFactory;\nuse Unleash\\Client\\Stickiness\\MurmurHashCalculator;\nuse Unleash\\Client\\Strategy\\DefaultStrategyHandler;\nuse Unleash\\Client\\Strategy\\GradualRolloutStrategyHandler;\nuse Unleash\\Client\\Strategy\\IpAddressStrategyHandler;\nuse Unleash\\Client\\Strategy\\UserIdStrategyHandler;\nuse Unleash\\Client\\UnleashBuilder;\nuse Unleash\\Client\\Helper\\Url;\n\n$builder = UnleashBuilder::create()\n    ->withAppName('Some app name')\n    ->withAppUrl('https://some-app-url.com') // as a string\n    ->withAppUrl(new Url('https://some-app-url.com', tags: ['myTag' => 'myValue'])) // or as Url instance\n    ->withInstanceId('Some instance id')\n    // now the optional ones\n    ->withHttpClient(new Client())\n    ->withRequestFactory(new HttpFactory())\n    ->withCacheHandler(new FilesystemCachePool( // example with using cache/filesystem-adapter\n        new Filesystem(\n            new Local(sys_get_temp_dir()),\n        ),\n    ), 30) // the second parameter is time to live in seconds\n    ->withCacheTimeToLive(60) // you can also set the cache time to live separately\n    // if you don't add any strategies, by default all strategies are added\n    ->withStrategies( // this example includes all available strategies\n        new DefaultStrategyHandler(),\n        new GradualRolloutStrategyHandler(new MurmurHashCalculator()),\n        new IpAddressStrategyHandler(),\n        new UserIdStrategyHandler(),\n    )\n    // add headers one by one, if you specify a header with the same name multiple times it will be replaced by the\n    // latest value\n    ->withHeader('My-Custom-Header', 'some-value')\n    ->withHeader('Some-Other-Header', 'some-other-value')\n    // you can specify multiple headers at the same time, be aware that this REPLACES all the headers\n    ->withHeaders([\n        'Yet-Another-Header' => 'and-another-value',\n    ]);\n")),(0,s.kt)("h2",{id:"proxy-sdk"},"Proxy SDK"),(0,s.kt)("p",null,"By default the SDK uses the Server-side endpoints on the Unleash API. You can also use the Proxy SDK, which is a\nlightweight SDK that uses the Client-side endpoints on the Unleash API. The Proxy SDK give a substantial performance improvement when using a large set of feature toggles (10K+)."),(0,s.kt)("p",null,"To use the Proxy SDK, you need to call ",(0,s.kt)("inlineCode",{parentName:"p"},"withProxy($apiKey)")," on the builder. The ",(0,s.kt)("inlineCode",{parentName:"p"},"$apiKey")," needs to be a ",(0,s.kt)("a",{parentName:"p",href:"https://docs.getunleash.io/reference/api-tokens-and-client-keys#front-end-tokens"},"frontend token"),". Note that ",(0,s.kt)("inlineCode",{parentName:"p"},"withProxy($apiKey)")," is in lieu of setting the API key header."),(0,s.kt)("p",null,"Example of using the builder to create a Proxy SDK instance:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n$builder = UnleashBuilder::create()\n    ->withAppName('Some app name')\n    ->withAppUrl('https://some-app-url.com/api')\n    ->withInstanceId('Some instance id')\n    ->withProxy(\"some-proxy-key\"); // <-- This is the only difference\n\n$unleash = $builder->build();\n\n$unleash.isEnabled(\"some-feature\");\n")),(0,s.kt)("p",null,"As of version 1.12, the Proxy SDK requires ",(0,s.kt)("a",{parentName:"p",href:"https://docs.getunleash.io/reference/unleash-edge"},"Edge"),", so the ",(0,s.kt)("inlineCode",{parentName:"p"},"appUrl")," needs to point to the Edge server."),(0,s.kt)("p",null,"Not supported in the Proxy SDK:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Custom strategies"),(0,s.kt)("li",{parentName:"ul"},"Registration (this is handled by Edge)")),(0,s.kt)("h2",{id:"caching"},"Caching"),(0,s.kt)("p",null,"It would be slow to perform a http request every time you check if a feature is enabled, especially in popular\napps. That's why this library has built-in support for PSR-16 cache implementations."),(0,s.kt)("p",null,"If you don't provide any implementation and default implementation exists, it's used, otherwise you'll get an exception.\nYou can also provide a TTL which defaults to 30 seconds for standard cache and 30 minutes for stale data cache."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Stale data cache is used when http communication fails while fetching feature list from the server. In that case\nthe latest valid version is used until the TTL expires or server starts responding again. An event gets emitted\nwhen this happens, for more information see ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/Unleash/unleash-client-php/blob/main/doc/events.md"},"events documentation"),".")),(0,s.kt)("p",null,"Cache implementations supported out of the box (meaning you don't need to configure anything):"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://packagist.org/packages/symfony/cache"},"symfony/cache")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://packagist.org/packages/cache/filesystem-adapter"},"cache/filesystem-adapter"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Cache\\Adapter\\Filesystem\\FilesystemCachePool;\nuse League\\Flysystem\\Adapter\\Local;\nuse League\\Flysystem\\Filesystem;\nuse Unleash\\Client\\UnleashBuilder;\n\n$builder = UnleashBuilder::create()\n    ->withCacheHandler(new FilesystemCachePool( // example with using cache/filesystem-adapter\n        new Filesystem(\n            new Local(sys_get_temp_dir()),\n        ),\n    ))\n    ->withCacheTimeToLive(120)\n    ->withStaleTtl(300)\n;\n\n// you can set the cache handler explicitly to null to revert back to autodetection\n\n$builder = $builder\n    ->withCacheHandler(null);\n")),(0,s.kt)("p",null,"You can use a different cache implementation for standard item cache and for stale cache. If you don't provide any\nimplementation for stale cache, the same instance as for standard cache is used."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Cache\\Adapter\\Filesystem\\FilesystemCachePool;\nuse League\\Flysystem\\Adapter\\Local;\nuse League\\Flysystem\\Filesystem;\nuse Unleash\\Client\\UnleashBuilder;\nuse Symfony\\Component\\Cache\\Psr16Cache;\nuse Symfony\\Component\\Cache\\Adapter\\ArrayAdapter;\n\n$builder = UnleashBuilder::create()\n    ->withCacheHandler(new FilesystemCachePool( // example with using cache/filesystem-adapter\n        new Filesystem(\n            new Local(sys_get_temp_dir()),\n        ),\n    ))\n    ->withStaleCacheHandler(new Psr16Cache(new ArrayAdapter()))\n    ->withCacheTimeToLive(120)\n    ->withStaleTtl(300)\n;\n")),(0,s.kt)("h2",{id:"bootstrapping"},"Bootstrapping"),(0,s.kt)("p",null,"You can set a default response from the SDK in cases when for some reason contacting Unleash server fails."),(0,s.kt)("p",null,"By default, you can bootstrap using:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"json string"),(0,s.kt)("li",{parentName:"ul"},"file (via path or instance of ",(0,s.kt)("inlineCode",{parentName:"li"},"SplFileInfo"),")"),(0,s.kt)("li",{parentName:"ul"},"URL address"),(0,s.kt)("li",{parentName:"ul"},"custom ",(0,s.kt)("a",{parentName:"li",href:"https://www.php.net/manual/en/wrappers.php"},"stream wrapper")," path"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"array")),(0,s.kt)("li",{parentName:"ul"},"instances of ",(0,s.kt)("inlineCode",{parentName:"li"},"Traversable")),(0,s.kt)("li",{parentName:"ul"},"instances of ",(0,s.kt)("inlineCode",{parentName:"li"},"JsonSerializable"))),(0,s.kt)("p",null,"These correspond to bootstrap providers:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"JsonBootstrapProvider")," (json string)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"FileBootstrapProvider")," (file, URL address, custom stream wrapper path)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"JsonSerializableBootstrapProvider")," (array, Traversable, JsonSerializable)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"EmptyBootstrapProvider")," (default provider that doesn't provide any bootstrap)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"CompoundBootstrapProvider")," (can contain multiple bootstrap providers and tries them one by one)")),(0,s.kt)("p",null,"Examples of bootstraps:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Unleash\\Client\\UnleashBuilder;\n\n$bootstrapJson = '{\"features\": []}';\n$bootstrapFile = 'path/to/my/file.json';\n$bootstrapSplFile = new SplFileInfo('path/to/my/file.json');\n$bootstrapUrl = 'https://example.com/unleash-bootstrap.json';\n$bootstrapStreamWrapper = 's3://my-bucket/bootstrap.json'; // assuming you have a custom stream wrapper called 's3'\n$bootstrapArray = [\n    'features' => [\n        [\n            'enabled' => true,\n            'name' => 'BootstrapDemo',\n            'description' => '',\n            'project' => 'default',\n            'stale' => false,\n            'type' => 'release',\n            'variants' => [],\n            'strategies' => [[ 'name' => 'default' ]],\n        ],\n    ],\n];\n$bootstrapTraversable = new class implements Iterator {\n    public function current(): mixed\n    {\n        // todo implement method\n    }\n    \n    public function next(): void\n    {\n        // todo implement method\n    }\n    \n    public function key(): mixed\n    {\n        // todo implement method\n    }\n    \n    public function valid(): bool\n    {\n        // todo implement method\n    }\n    \n    public function rewind(): void\n    {\n        // todo implement method\n    }\n};\n$bootstrapJsonSerializable = new class implements JsonSerializable {\n    public function jsonSerialize(): array {\n        // TODO: Implement jsonSerialize() method.\n    }\n}\n\n// now assign them to the builder, note that each withBootstrap* method call overrides the bootstrap\n\n$builder = UnleashBuilder::create()\n    ->withBootstrap($bootstrapJson)\n    ->withBootstrapFile($bootstrapFile)\n    ->withBootstrapFile($bootstrapSplFile)\n    ->withBootstrapUrl($bootstrapUrl)\n    ->withBootstrapFile($bootstrapStreamWrapper)\n    ->withBootstrap($bootstrapArray)\n    ->withBootstrap($bootstrapTraversable)\n    ->withBootstrap($bootstrapJsonSerializable)\n    ->withBootstrap(null) // empty bootstrap\n;\n")),(0,s.kt)("p",null,"Using bootstrap providers directly:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Unleash\\Client\\Bootstrap\\EmptyBootstrapProvider;\nuse Unleash\\Client\\Bootstrap\\FileBootstrapProvider;\nuse Unleash\\Client\\Bootstrap\\JsonBootstrapProvider;\nuse Unleash\\Client\\Bootstrap\\JsonSerializableBootstrapProvider;\nuse Unleash\\Client\\UnleashBuilder;\n\n// using variables defined in previous example, again each call overrides the last bootstrap provider\n\n$builder = UnleashBuilder::create()\n    ->withBootstrapProvider(new JsonBootstrapProvider($bootstrapJson))\n    ->withBootstrapProvider(new FileBootstrapProvider($bootstrapFile))\n    ->withBootstrapProvider(new FileBootstrapProvider($bootstrapSplFile))\n    ->withBootstrapProvider(new FileBootstrapProvider($bootstrapUrl))\n    ->withBootstrapProvider(new FileBootstrapProvider($bootstrapStreamWrapper))\n    ->withBootstrapProvider(new JsonSerializableBootstrapProvider($bootstrapArray))\n    ->withBootstrapProvider(new JsonSerializableBootstrapProvider($bootstrapTraversable))\n    ->withBootstrapProvider(new JsonSerializableBootstrapProvider($bootstrapJsonSerializable))\n    ->withBootstrapProvider(new EmptyBootstrapProvider()) // equivalent to ->withBootstrap(null)\n;\n")),(0,s.kt)("p",null,"Using multiple bootstrap providers:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Unleash\\Client\\Bootstrap\\CompoundBootstrapProvider;\nuse Unleash\\Client\\Bootstrap\\FileBootstrapProvider;\nuse Unleash\\Client\\Bootstrap\\JsonSerializableBootstrapProvider;\nuse Unleash\\Client\\UnleashBuilder;\n\n// using variables defined in first example\n\n$provider = new CompoundBootstrapProvider(\n    new FileBootstrapProvider($bootstrapUrl),\n    new FileBootstrapProvider($bootstrapFile),\n    new JsonSerializableBootstrapProvider($bootstrapArray),\n);\n\n// All providers in compound bootstrap provider will be tried one by one in the order they were assigned until\n// at least one returns something.\n\n// If no provider returns non-null value, the compound provider itself returns null.\n\n// If an exception is thrown in any of the inner providers it's ignored and next provider is tried.\n\n// If an exception was thrown in any of the inner providers and no other provider returned any value, the exceptions\n// from inner providers are thrown using a CompoundException, you can get the exceptions by calling ->getExceptions()\n// on it.\n\n$builder = UnleashBuilder::create()\n    ->withBootstrapProvider($provider);\n")),(0,s.kt)("h3",{id:"custom-bootstrap-provider"},"Custom bootstrap provider"),(0,s.kt)("p",null,"Creating a custom bootstrap provider is very simple, just implement the ",(0,s.kt)("inlineCode",{parentName:"p"},"BootstrapProvider")," interface and use your\nclass in the builder:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Unleash\\Client\\UnleashBuilder;\nuse Unleash\\Client\\Bootstrap\\BootstrapProvider;\n\nfinal class MyBootstrapProvider implements BootstrapProvider\n{\n    public function getBootstrap() : array|JsonSerializable|Traversable|null\n    {\n        // TODO: Implement getBootstrap() method.\n    }\n}\n\n$builder = UnleashBuilder::create()\n    ->withBootstrapProvider(new MyBootstrapProvider());\n")),(0,s.kt)("h3",{id:"disabling-communication-with-unleash-server"},"Disabling communication with Unleash server"),(0,s.kt)("p",null,"It may be useful to disable communication with the Unleash server for local development and using a bootstrap instead."),(0,s.kt)("p",null,"Note that when you disable communication with Unleash and don't provide a bootstrap, an exception will be thrown."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Tip: Set the cache interval to 0 to always have a fresh bootstrap content.")),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"The usually required parameters (app name, instance id, app url) are not required when communication is disabled.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Unleash\\Client\\UnleashBuilder;\n\n$unleash = UnleashBuilder::create()\n    ->withBootstrap('{}')\n    ->withFetchingEnabled(false) // here we disable communication with Unleash server\n    ->withCacheTimeToLive(0) // disable the caching layer to always get a fresh bootstrap\n    ->build();\n")),(0,s.kt)("h2",{id:"strategies"},"Strategies"),(0,s.kt)("p",null,"Unleash servers can use multiple strategies for enabling or disabling features. Which strategy gets used is defined\non the server. This implementation supports all v4 strategies.\n",(0,s.kt)("a",{parentName:"p",href:"https://docs.getunleash.io/user_guide/activation_strategy"},"More here"),"."),(0,s.kt)("h3",{id:"default-strategy"},"Default strategy"),(0,s.kt)("p",null,"This is the simplest of them and simply always returns true if the feature defines default as its chosen strategy\nand doesn't need any context parameters."),(0,s.kt)("h3",{id:"ip-address-strategy"},"IP address strategy"),(0,s.kt)("p",null,"Enables feature based on the IP address. Takes current user's IP address from the context object. You can provide your\nown IP address or use the default (",(0,s.kt)("inlineCode",{parentName:"p"},"$_SERVER['REMOTE_ADDR']"),"). Providing your own is especially useful if you're behind\nproxy and thus ",(0,s.kt)("inlineCode",{parentName:"p"},"REMOTE_ADDR")," would return your proxy server's IP address instead."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"As of 1.4.0 the CIDR notation is supported")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Unleash\\Client\\UnleashBuilder;\nuse Unleash\\Client\\Configuration\\UnleashContext;\n\n$unleash = UnleashBuilder::create()\n    ->withAppName('Some app name')\n    ->withAppUrl('https://some-app-url.com')\n    ->withInstanceId('Some instance id')\n    ->build();\n\n// without context, using the auto detected IP\n$enabled = $unleash->isEnabled('some-feature');\n\n// with context\n$context = new UnleashContext(ipAddress: $_SERVER['HTTP_X_FORWARDED_FOR']);\n// or pre php 8 style\n$context = (new UnleashContext())\n    ->setIpAddress($_SERVER['HTTP_X_FORWARDED_FOR']);\n$enabled = $unleash->isEnabled('some-feature', $context);\n")),(0,s.kt)("h3",{id:"user-id-strategy"},"User ID strategy"),(0,s.kt)("p",null,"Enables feature based on the user ID. The user ID can be any string. You must always provide your own user id via\ncontext."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Unleash\\Client\\UnleashBuilder;\nuse Unleash\\Client\\Configuration\\UnleashContext;\n\n$unleash = UnleashBuilder::create()\n    ->withAppName('Some app name')\n    ->withAppUrl('https://some-app-url.com')\n    ->withInstanceId('Some instance id')\n    ->build();\n\n$context = new UnleashContext(currentUserId: 'some-user-id');\n$enabled = $unleash->isEnabled('some-feature', $context);\n")),(0,s.kt)("h3",{id:"gradual-rollout-strategy"},"Gradual rollout strategy"),(0,s.kt)("p",null,"Also known as flexible rollout. Allows you to enable feature for only a percentage of users based on their user id,\nsession id or randomly. The default is to try in this order: user id, session id, random."),(0,s.kt)("p",null,"If you specify the user id type on your Unleash server, you must also provide the user id via context, same as in the\nUser ID strategy. Session ID can also be provided via context, it defaults to the current session id via ",(0,s.kt)("inlineCode",{parentName:"p"},"session_id()"),"\ncall."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"This strategy requires a stickiness calculator that transforms the id (user, session or random) into a number between\n1 and 100. You can provide your own or use the default \\Unleash\\Client\\Stickiness\\MurmurHashCalculator")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Unleash\\Client\\UnleashBuilder;\nuse Unleash\\Client\\Configuration\\UnleashContext;\n\n$unleash = UnleashBuilder::create()\n    ->withAppName('Some app name')\n    ->withAppUrl('https://some-app-url.com')\n    ->withInstanceId('Some instance id')\n    ->build();\n\n// assume the feature uses the default type which means that it will default to either session id (if session is started)\n// or randomly\n$unleash->isEnabled('some-feature');\n\n// still using the default strategy but this time with user id (which is the first to be used if present)\n$context = new UnleashContext(currentUserId: 'some-user-id');\n$unleash->isEnabled('some-feature', $context);\n\n// let's start the session to ensure the session id is used\nsession_start();\n$unleash->isEnabled('some-feature');\n\n// or you can provide your own session id\n$context = new UnleashContext(sessionId: 'sess-123456');\n$unleash->isEnabled('some-feature', $context);\n\n// assume the feature is set to use the user id, the first call returns false (no context given), the second\n// one returns true/false based on the user id\n$unleash->isEnabled('some-feature');\n$context = new UnleashContext(currentUserId: 'some-user-id');\n$unleash->isEnabled('some-feature', $context);\n\n// the same goes for session, assume the session isn't started yet and the feature is set to use the session type\n$unleash->isEnabled('some-feature'); // returns false because no session is available\n\n$context = new UnleashContext(sessionId: 'some-session-id');\n$unleash->isEnabled('some-feature', $context); // works because you provided the session id manually\n\nsession_start();\n$unleash->isEnabled('some-feature'); // works because the session is started\n\n// lastly you can force the feature to use the random type which always works\n$unleash->isEnabled('some-feature');\n")),(0,s.kt)("h3",{id:"hostname-strategy"},"Hostname strategy"),(0,s.kt)("p",null,"This strategy allows you to match against a list of server hostnames (which are not the same as http hostnames)."),(0,s.kt)("p",null,"If you don't specify a hostname in context, it defaults to the current hostname using\n",(0,s.kt)("a",{parentName:"p",href:"https://www.php.net/gethostname"},(0,s.kt)("inlineCode",{parentName:"a"},"gethostname()")),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Unleash\\Client\\UnleashBuilder;\nuse Unleash\\Client\\Configuration\\UnleashContext;\n\n$unleash = UnleashBuilder::create()\n    ->withAppName('Some app name')\n    ->withAppUrl('https://some-app-url.com')\n    ->withInstanceId('Some instance id')\n    ->build();\n\n// context with custom hostname\n$context = new UnleashContext(hostname: 'My-Cool-Hostname');\n$enabled = $unleash->isEnabled('some-feature', $context);\n\n// without custom hostname, defaults to gethostname() result or null\n$enabled = $unleash->isEnabled('some-feature');\n")),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Note: This library also implements some deprecated strategies, namely ",(0,s.kt)("inlineCode",{parentName:"p"},"gradualRolloutRandom"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"gradualRolloutSessionId"),"\nand ",(0,s.kt)("inlineCode",{parentName:"p"},"gradualRolloutUserId")," which all alias to the Gradual rollout strategy.")),(0,s.kt)("h3",{id:"context-provider"},"Context provider"),(0,s.kt)("p",null,"Manually creating relevant context can get tiring real fast. Luckily you can create your own context provider that\nwill do it for you!"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Unleash\\Client\\ContextProvider\\UnleashContextProvider;\nuse Unleash\\Client\\Configuration\\UnleashContext;\nuse Unleash\\Client\\UnleashBuilder;\n\nfinal class MyContextProvider implements UnleashContextProvider \n{\n    public function getContext(): Context\n    {\n        $context = new UnleashContext();\n        $context->setCurrentUserId('user id from my app');\n        \n        return $context;     \n    }\n}\n\n$unleash = UnleashBuilder::create()\n    ->withAppName('Some app name')\n    ->withAppUrl('https://some-app-url.com')\n    ->withInstanceId('Some instance id')\n    // here we set the custom provider\n    ->withContextProvider(new MyContextProvider())\n    ->build();\n\nif ($unleash->isEnabled('someFeature')) { // this call will use your context provider with the provided user id\n\n}\n")),(0,s.kt)("h3",{id:"custom-strategies"},"Custom strategies"),(0,s.kt)("p",null,"To implement your own strategy you need to create a class implementing ",(0,s.kt)("inlineCode",{parentName:"p"},"StrategyHandler")," (or ",(0,s.kt)("inlineCode",{parentName:"p"},"AbstractStrategyHandler"),"\nwhich contains some useful methods). Then you need to instruct the builder to use your custom strategy."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Unleash\\Client\\Strategy\\AbstractStrategyHandler;\nuse Unleash\\Client\\DTO\\Strategy;\nuse Unleash\\Client\\Configuration\\Context;\nuse Unleash\\Client\\Strategy\\DefaultStrategyHandler;\n\nclass AprilFoolsStrategy extends AbstractStrategyHandler\n{\n    public function __construct(private DefaultStrategyHandler $original)\n    {\n    }\n    \n    public function getStrategyName() : string\n    {\n        return 'aprilFools';\n    }\n    \n    public function isEnabled(Strategy $strategy, Context $context) : bool\n    {\n        $date = new DateTimeImmutable();\n        if ((int) $date->format('n') === 4 && (int) $date->format('j') === 1) {\n            return (bool) random_int(0, 1);\n        }\n        \n        return $this->original->isEnabled($strategy, $context);\n    }\n}\n")),(0,s.kt)("p",null,"Now you must instruct the builder to use your new strategy"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Unleash\\Client\\UnleashBuilder;\nuse Unleash\\Client\\Strategy\\IpAddressStrategyHandler;\n\n$unleash = UnleashBuilder::create()\n    ->withAppName('Some app name')\n    ->withAppUrl('https://some-app-url.com')\n    ->withInstanceId('Some instance id')\n    ->withStrategy(new AprilFoolsStrategy()) // this will append your strategy to the existing list\n    ->build();\n\n// if you want to replace all strategies, use withStrategies() instead\n\n$unleash = UnleashBuilder::create()\n    ->withAppName('Some app name')\n    ->withAppUrl('https://some-app-url.com')\n    ->withInstanceId('Some instance id')\n    ->withStrategies(new AprilFoolsStrategy(), new IpAddressStrategyHandler())\n    // now the unleash object will have only the two strategies\n    ->build();\n")),(0,s.kt)("h2",{id:"variants"},"Variants"),(0,s.kt)("p",null,"You can use multiple variants of one feature, for example for A/B testing. If no variant matches or the feature doesn't\nhave any variants, a default one will be returned which returns ",(0,s.kt)("inlineCode",{parentName:"p"},"false")," for ",(0,s.kt)("inlineCode",{parentName:"p"},"isEnabled()"),". You can also provide your\nown default variant."),(0,s.kt)("p",null,"Variant may or may not contain a payload."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Unleash\\Client\\DTO\\DefaultVariant;\nuse Unleash\\Client\\UnleashBuilder;\nuse Unleash\\Client\\Configuration\\UnleashContext;\nuse Unleash\\Client\\Enum\\VariantPayloadType;\nuse Unleash\\Client\\DTO\\DefaultVariantPayload;\n\n$unleash = UnleashBuilder::create()\n    ->withAppName('Some app name')\n    ->withAppUrl('https://some-app-url.com')\n    ->withInstanceId('Some instance id')\n    ->build();\n    \n$variant = $unleash->getVariant('nonexistentFeature');\nassert($variant->isEnabled() === false);\n\n// getVariant() does isEnabled() call in the background meaning that it will return the default falsy variant\n// whenever isEnabled() returns false\n$variant = $unleash->getVariant('existingFeatureThatThisUserDoesNotHaveAccessTo');\nassert($variant->isEnabled() === false);\n\n$variant = $unleash->getVariant('someFeature', new UnleashContext(currentUserId: '123'));\nif ($variant->isEnabled()) {\n    $payload = $variant->getPayload();\n    if ($payload !== null) {\n        if ($payload->getType() === VariantPayloadType::JSON) {\n            $jsonData = $payload->fromJson();\n        }\n        $stringPayload = $payload->getValue();\n    }\n}\n\n// providing custom default variant\n\n$variant = $unleash->getVariant('nonexistentFeature', fallbackVariant: new DefaultVariant(\n    'variantName',\n    enabled: true,\n    payload: new DefaultVariantPayload(VariantPayloadType::STRING, 'somePayload'),\n));\nassert($variant->getPayload()->getValue() === 'somePayload');\n")),(0,s.kt)("h2",{id:"client-registration"},"Client registration"),(0,s.kt)("p",null,"By default, the library automatically registers itself as an application in the Unleash server. If you want to prevent\nthis, use ",(0,s.kt)("inlineCode",{parentName:"p"},"withAutomaticRegistrationEnabled(false)")," in the builder."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Unleash\\Client\\UnleashBuilder;\n\n$unleash = UnleashBuilder::create()\n    ->withAppName('Some App Name')\n    ->withAppUrl('https://somewhere.com')\n    ->withInstanceId('some-instance-id')\n    ->withAutomaticRegistrationEnabled(false)\n    ->build();\n\n// event though the client will not attempt to register, you can still use isEnabled()\n$unleash->isEnabled('someFeature');\n\n// if you want to register manually\n$unleash->register();\n\n// you can call the register method multiple times, the Unleash server doesn't mind\n$unleash->register();\n$unleash->register();\n")),(0,s.kt)("h2",{id:"metrics"},"Metrics"),(0,s.kt)("p",null,"By default, this library sends metrics which are simple statistics about whether user was granted access or not."),(0,s.kt)("p",null,"The metrics will be bundled and sent once the bundle created time crosses the configured threshold.\nBy default this threshold is 30,000 milliseconds (30 seconds) meaning that when a new bundle gets created it won't be\nsent sooner than in 30 seconds. That doesn't mean it's guaranteed that the metrics will be sent every 30 seconds, it\nonly guarantees that the metrics won't be sent sooner."),(0,s.kt)("p",null,"Example:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"user visits your site and this sdk gets triggered, no metric has been sent"),(0,s.kt)("li",{parentName:"ol"},"after five seconds user visits another page where again this sdk gets triggered, no metric sent"),(0,s.kt)("li",{parentName:"ol"},"user waits one minute before doing anything, no one else is accessing your site"),(0,s.kt)("li",{parentName:"ol"},"after one minute user visits another page, the metrics have been sent to the Unleash server")),(0,s.kt)("p",null,"In the example above the metric bundle gets sent after 1 minute and 5 seconds because there was no one to trigger\nthe code."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Unleash\\Client\\UnleashBuilder;\n\n$unleash = UnleashBuilder::create()\n    ->withAppName('Some App Name')\n    ->withAppUrl('https://somewhere.com')\n    ->withInstanceId('some-instance-id')\n    ->withMetricsEnabled(false) // turn off metric sending\n    ->withMetricsEnabled(true) // turn on metric sending\n    ->withMetricsInterval(10_000) // interval in milliseconds (10 seconds)\n    ->build();\n\n// the metric will be collected but not sent immediately\n$unleash->isEnabled('test');\nsleep(10);\n// now the metrics will get sent\n$unleash->isEnabled('test');\n")),(0,s.kt)("h2",{id:"custom-headers-via-middleware"},"Custom headers via middleware"),(0,s.kt)("p",null,"While middlewares for http client are not natively supported by this SDK, you can pass your own http client which\nsupports them."),(0,s.kt)("p",null,"The most popular http client, guzzle, supports them out of the box and here's an example of how to pass custom headers\nautomatically (for more information visit ",(0,s.kt)("a",{parentName:"p",href:"https://docs.guzzlephp.org/en/stable/handlers-and-middleware.html"},"official guzzle documentation on middlewares"),"):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Handler\\CurlHandler;\nuse GuzzleHttp\\HandlerStack;\nuse GuzzleHttp\\Middleware;\nuse Psr\\Http\\Message\\RequestInterface;\nuse Unleash\\Client\\UnleashBuilder;\n\n// any callable is valid, it may be a function reference, anonymous function or an invokable class\n\n// example invokable class\nfinal class AddHeaderMiddleware\n{\n    public function __construct(\n        private readonly string $headerName,\n        private readonly string $value,\n    ) {\n    }\n\n    public function __invoke(RequestInterface $request): RequestInterface\n    {\n        return $request->withHeader($this->headerName, $this->value);\n    }\n}\n\n// example anonymous function\n$addHeaderMiddleware = fn (string $headerName, string $headerValue)\n    => fn(RequestInterface $request)\n        => $request->withHeader($headerName, $headerValue);\n\n// create a handler stack that holds information about all middlewares\n$stack = HandlerStack::create(new CurlHandler());\n// mapRequest is a helper that simplifies modifying request\n$stack->push(Middleware::mapRequest(new AddHeaderMiddleware('X-My-Header', 'Some-Value')));\n// or with lambda\n$stack->push(Middleware::mapRequest($addHeaderMiddleware('X-My-Header2', 'Some-Value')));\n// assign the stack with middlewares as a handler\n$httpClient = new Client(['handler' => $stack]);\n\n$unleash = UnleashBuilder::create()\n    ->withHttpClient($httpClient) // assign the custom http client\n    ->withAppName('My-App')\n    ->withInstanceId('My-Instance')\n    ->withAppUrl('http://localhost:4242')\n    ->build();\n\n// now every http request will have X-My-Header header with value Some-Value\n$unleash->isEnabled('some-feature');\n")),(0,s.kt)("h2",{id:"constraints"},"Constraints"),(0,s.kt)("p",null,"Constraints are supported by this SDK and will be handled correctly by ",(0,s.kt)("inlineCode",{parentName:"p"},"Unleash::isEnabled()")," if present."),(0,s.kt)("h2",{id:"gitlab-specifics"},"GitLab specifics"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"In GitLab you have to use the provided instance id, you cannot create your own."),(0,s.kt)("li",{parentName:"ul"},"No authorization header is necessary."),(0,s.kt)("li",{parentName:"ul"},"Instead of app name you need to specify the GitLab environment.",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"For this purpose you can use ",(0,s.kt)("inlineCode",{parentName:"li"},"withGitlabEnvironment()")," method in builder, it's an alias to ",(0,s.kt)("inlineCode",{parentName:"li"},"withAppName()")," but\ncommunicates the intent better."))),(0,s.kt)("li",{parentName:"ul"},"GitLab doesn't use registration system, you can set the SDK to disable automatic registration and save one http call."),(0,s.kt)("li",{parentName:"ul"},"GitLab doesn't read metrics, you can set the SDK to disable sending them and save some http calls.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Unleash\\Client\\UnleashBuilder;\n\n$gitlabUnleash = UnleashBuilder::createForGitlab()\n    ->withInstanceId('H9sU9yVHVAiWFiLsH2Mo') // generated in GitLab\n    ->withAppUrl('https://git.example.com/api/v4/feature_flags/unleash/1')\n    ->withGitlabEnvironment('Production')\n    ->build();\n\n// the above is equivalent to\n$gitlabUnleash = UnleashBuilder::create()\n    ->withInstanceId('H9sU9yVHVAiWFiLsH2Mo')\n    ->withAppUrl('https://git.example.com/api/v4/feature_flags/unleash/1')\n    ->withGitlabEnvironment('Production')\n    ->withAutomaticRegistrationEnabled(false)\n    ->withMetricsEnabled(false)\n    ->build();\n")),(0,s.kt)("p",null,"Check out our guide for more information on how to build and scale ",(0,s.kt)("a",{parentName:"p",href:"https://docs.getunleash.io/topics/feature-flags/feature-flag-best-practices"},"feature flag systems")),(0,s.kt)("hr",null),(0,s.kt)("p",null,"This content was generated on ",(0,s.kt)("time",{dateTime:"2023-11-05T00:15:37.946Z"},"5 November 2023 at 00:15:37 Coordinated Universal Time")))}h.isMDXComponent=!0}}]);