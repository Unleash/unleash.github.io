"use strict";(self.webpackChunkwebsitev_2=self.webpackChunkwebsitev_2||[]).push([[3402],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var l=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,l,r=function(e,n){if(null==e)return{};var t,l,r={},a=Object.keys(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=l.createContext({}),c=function(e){var n=l.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return l.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},d=l.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,v=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return t?l.createElement(v,o(o({ref:n},u),{},{components:t})):l.createElement(v,o({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<a;c++)o[c]=t[c];return l.createElement.apply(null,o)}return l.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8215:(e,n,t)=>{t.d(n,{Z:()=>r});var l=t(7294);const r=function(e){let{children:n,hidden:t,className:r}=e;return l.createElement("div",{role:"tabpanel",hidden:t,className:r},n)}},3580:(e,n,t)=>{t.d(n,{Z:()=>u});var l=t(7462),r=t(7294),a=t(2389),o=t(1565),i=t(6010);const s="tabItem_LplD";function c(e){var n,t,a;const{lazy:c,block:u,defaultValue:p,values:d,groupId:m,className:v}=e,h=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=d?d:h.map((e=>{let{props:{value:n,label:t,attributes:l}}=e;return{value:n,label:t,attributes:l}})),g=(0,o.lx)(f,((e,n)=>e.value===n.value));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const y=null===p?p:null!=(n=null!=p?p:null==(t=h.find((e=>e.props.default)))?void 0:t.props.value)?n:null==(a=h[0])?void 0:a.props.value;if(null!==y&&!f.some((e=>e.value===y)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+f.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:k,setTabGroupChoices:b}=(0,o.UB)(),[x,w]=(0,r.useState)(y),N=[],{blockElementScrollPositionUntilNextRender:C}=(0,o.o5)();if(null!=m){const e=k[m];null!=e&&e!==x&&f.some((n=>n.value===e))&&w(e)}const P=e=>{const n=e.currentTarget,t=N.indexOf(n),l=f[t].value;l!==x&&(C(n),w(l),null!=m&&b(m,l))},T=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{const n=N.indexOf(e.currentTarget)+1;t=N[n]||N[0];break}case"ArrowLeft":{const n=N.indexOf(e.currentTarget)-1;t=N[n]||N[N.length-1];break}}null==(n=t)||n.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":u},v)},f.map((e=>{let{value:n,label:t,attributes:a}=e;return r.createElement("li",(0,l.Z)({role:"tab",tabIndex:x===n?0:-1,"aria-selected":x===n,key:n,ref:e=>N.push(e),onKeyDown:T,onFocus:P,onClick:P},a,{className:(0,i.Z)("tabs__item",s,null==a?void 0:a.className,{"tabs__item--active":x===n})}),null!=t?t:n)}))),c?(0,r.cloneElement)(h.filter((e=>e.props.value===x))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},h.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==x})))))}function u(e){const n=(0,a.Z)();return r.createElement(c,(0,l.Z)({key:String(n)},e))}},1046:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var l=t(7462),r=(t(7294),t(3905)),a=t(3580),o=t(8215);const i={id:"proxy-svelte",title:"Svelte Proxy SDK"},s=void 0,c={unversionedId:"sdks/proxy-svelte",id:"sdks/proxy-svelte",title:"Svelte Proxy SDK",description:"Svelte Proxy SDK is currently at version 0.0.2 and is experimental.",source:"@site/docs/sdks/proxy-svelte.md",sourceDirName:"sdks",slug:"/sdks/proxy-svelte",permalink:"/sdks/proxy-svelte",editUrl:"https://github.com/Unleash/unleash/edit/main/website/docs/sdks/proxy-svelte.md",tags:[],version:"current",frontMatter:{id:"proxy-svelte",title:"Svelte Proxy SDK"},sidebar:"documentation",previous:{title:"React Proxy SDK",permalink:"/sdks/proxy-react"},next:{title:"Vue Proxy SDK",permalink:"/sdks/proxy-vue"}},u=[{value:"Installation",id:"installation",children:[],level:2},{value:"Initialization",id:"initialization",children:[],level:2},{value:"Deferring client start",id:"deferring-client-start",children:[],level:2},{value:"Usage",id:"usage",children:[{value:"Check feature toggle status",id:"check-feature-toggle-status",children:[],level:3},{value:"Check variants",id:"check-variants",children:[],level:3},{value:"Defer rendering until flags fetched",id:"defer-rendering-until-flags-fetched",children:[],level:3},{value:"Updating context",id:"updating-context",children:[],level:3}],level:2}],p={toc:u};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,l.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("div",{class:"alert alert--info",role:"alert"},(0,r.kt)("em",null,"Svelte Proxy SDK is currently at version 0.0.2 and is experimental"),"."),(0,r.kt)("br",null),(0,r.kt)("p",null,"This library is meant to be used with the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unleash/unleash-proxy"},"unleash-proxy"),". The proxy application layer will sit between your unleash instance and your client applications, and provides performance and security benefits. DO NOT TRY to connect this library directly to the unleash instance, as the datasets follow different formats because the proxy only returns evaluated toggle information."),(0,r.kt)("p",null,"For more detailed information, check out the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unleash/proxy-client-svelte"},"Svelte Proxy SDK on GitHub"),"."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)(a.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"npm install @unleash/proxy-client-svelte\n"))),(0,r.kt)(o.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"yarn add @unleash/proxy-client-svelte\n")))),(0,r.kt)("h2",{id:"initialization"},"Initialization"),(0,r.kt)("p",null,"Import the provider like this in your entrypoint file (typically index.svelte):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"<script lang=\"ts\">\n    let FlagProvider;\n\n    onMount(async () => {\n        const proxyClientSvelte = await import('@unleash/proxy-client-svelte');\n        ({ FlagProvider } = proxyClientSvelte);\n    });\n\n    const config = {\n        url: 'https://HOSTNAME/proxy',\n        clientKey: 'PROXYKEY',\n        refreshInterval: 15,\n        appName: 'your-app-name',\n        environment: 'dev'\n    };\n<\/script>\n\n<svelte:component this={FlagProvider} {config}>\n    <App />\n</svelte:component>\n")),(0,r.kt)("p",null,"Alternatively, you can pass your own client in to the FlagProvider:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"<script lang=\"ts\">\n    import { UnleashClient } from '@unleash/proxy-client-svelte';\n\n    let FlagProvider;\n\n    onMount(async () => {\n        const proxyClientSvelte = await import('@unleash/proxy-client-svelte');\n        ({ FlagProvider } = proxyClientSvelte);\n    });\n\n    const config = {\n        url: 'https://HOSTNAME/proxy',\n        clientKey: 'PROXYKEY',\n        refreshInterval: 15,\n        appName: 'your-app-name',\n        environment: 'dev'\n    };\n\n    const client = new UnleashClient(config);\n<\/script>\n\n<svelte:component this={FlagProvider} unleashClient={client}>\n    <App />\n</svelte:component>\n")),(0,r.kt)("h2",{id:"deferring-client-start"},"Deferring client start"),(0,r.kt)("p",null,"By default, the Unleash client will start polling the Proxy for toggles immediately when the ",(0,r.kt)("inlineCode",{parentName:"p"},"FlagProvider")," component renders. You can delay the polling by:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"setting the ",(0,r.kt)("inlineCode",{parentName:"li"},"startClient")," prop to ",(0,r.kt)("inlineCode",{parentName:"li"},"false")),(0,r.kt)("li",{parentName:"ul"},"passing a client instance to the ",(0,r.kt)("inlineCode",{parentName:"li"},"FlagProvider"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"<svelte:component\n  this={FlagProvider}\n  unleashClient={client}\n  startClient={false}\n>\n  <App />\n</svelte:component>\n")),(0,r.kt)("p",null,"Deferring the client start gives you more fine-grained control over when to start fetching the feature toggle configuration. This could be handy in cases where you need to get some other context data from the server before fetching toggles, for instance."),(0,r.kt)("p",null,"To start the client, use the client's ",(0,r.kt)("inlineCode",{parentName:"p"},"start")," method. The below snippet of pseudocode will defer polling until the end of the ",(0,r.kt)("inlineCode",{parentName:"p"},"asyncProcess")," function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<script lang="ts">\n    const client = new UnleashClient({\n        /* ... */\n    });\n\n    onMount(() => {\n        const asyncProcess = async () => {\n            // do async work ...\n            client.start();\n        };\n        asyncProcess();\n    });\n<\/script>\n\n<svelte:component this={FlagProvider} unleashClient={client} startClient={false}>\n    <App />\n</svelte:component>\n')),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("h3",{id:"check-feature-toggle-status"},"Check feature toggle status"),(0,r.kt)("p",null,"To check if a feature is enabled:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"<script lang=\"ts\">\n    import { useFlag } from '@unleash/proxy-client-svelte';\n\n    const enabled = useFlag('travel.landing');\n<\/script>\n\n{#if $enabled}\n<SomeComponent />\n{:else}\n<AnotherComponent />\n{/if}\n")),(0,r.kt)("h3",{id:"check-variants"},"Check variants"),(0,r.kt)("p",null,"To check variants:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"<script lang=\"ts\">\n    import { useVariant } from '@unleash/proxy-client-svelte';\n\n    const variant = useVariant('travel.landing');\n<\/script>\n\n{#if $variant.enabled && $variant.name === 'SomeComponent'}\n<SomeComponent />\n{:else if $variant.enabled && $variant.name === 'AnotherComponent'}\n<AnotherComponent />\n{:else}\n<DefaultComponent />\n{/if}\n")),(0,r.kt)("h3",{id:"defer-rendering-until-flags-fetched"},"Defer rendering until flags fetched"),(0,r.kt)("p",null,"useFlagsStatus retrieves the ready state and error events. Follow the following steps in order to delay rendering until the flags have been fetched."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"<script lang=\"ts\">\n    import { useFlagsStatus } from '@unleash/proxy-client-svelte';\n    const { flagsReady, flagsError } = useFlagsStatus();\n<\/script>\n\n{#if !$flagsReady}\n<Loading />\n{:else}\n<MyComponent error={flagsError} />\n{/if}\n")),(0,r.kt)("h3",{id:"updating-context"},"Updating context"),(0,r.kt)("p",null,"Follow the following steps in order to update the unleash context:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"<script lang=\"ts\">\n    import { useUnleashContext, useFlag } from '@unleash/proxy-client-svelte';\n\n    export let userId: string = undefined;\n\n    const updateContext = useUnleashContext();\n\n    onMount(() => {\n        updateContext({ userId });\n    });\n\n    $: {\n        async function run() {\n            await updateContext({ userId });\n            console.log('new flags loaded for', userId);\n        }\n        run();\n    }\n<\/script>\n")))}d.isMDXComponent=!0}}]);